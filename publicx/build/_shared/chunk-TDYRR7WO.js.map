{
  "version": 3,
  "sources": ["../../../app/routes/header.jsx", "../../../app/common/add_message.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/routes/header.jsx\"\n);\nimport.meta.hot.lastModified = \"1709613072358.4138\";\n}\n// REMIX HMR END\n\nimport React from \"react\";\nimport userMenuRoute from \"../routes/user-menu/route.jsx\";\nimport io from \"socket.io-client\";\nimport Auth from \"../utils/auth.jsx\";\nimport MyNotifications from \"../Components/my-notification/components/my-notifications.jsx\";\nimport config from \"../common/config.jsx\";\nimport { Link } from \"@remix-run/react\";\nimport { addMessage } from \"../common/add_message.jsx\";\n\nexport default class Header extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Initialize state with default values\n    this.state = {\n      isLoggedOut: false,\n      show: false,\n      showMyNotifications: false,\n      myNotifications: [],\n      userId: Auth.get(\"userId\"),\n      profilePicture: \"\",\n      users: [],\n      dataMessage: null,\n      chatWindows: []\n    };\n\n    // Bind event handlers\n    this.toggleShowMenu = this.toggleShowMenu.bind(this);\n    this.toggleShowMyNotifications = this.toggleShowMyNotifications.bind(this);\n    this.updateNotifications = this.updateNotifications.bind(this);\n    // Initialize socket connection\n    this.socket = io.connect(\"/\", {\n      secure: true,\n      path: \"/chat/socket.io\"\n    });\n    this.userId = Auth.get(\"userId\");\n    this.socket.emit(\"my notification userId\", this.userId);\n    this.socket.on(\"notificationList\", myNotification => {\n      this.setState({\n        myNotifications: [...this.state.myNotifications, myNotification]\n      });\n    });\n    this.socket.on(\"RECEIVE_HEADER_MESSAGE\", data => {\n      let userName = Auth.get(\"userName\");\n      let userId = Auth.get(\"userId\");\n      if (data.toUser === userId) {\n        this.setState({\n          dataMessage: data\n        });\n        if (data.groupName === \"\") {\n          if (data.toUser === userId || userName === data.author) {\n            if (!this.props.context.state.chatWindows.length) {\n              addMessage(data, this);\n            }\n          }\n        } else {\n          if (!this.props.context.state.chatWindows.length) {\n            addMessage(data, this);\n          }\n        }\n      }\n      this.props.context.actions.updateState(\"dataMessage\", data);\n    });\n  }\n\n  toggleShowMenu() {\n    this.setState({\n      show: !this.state.show\n    });\n  }\n\n  toggleShowMyNotifications() {\n    this.setState({\n      showMyNotifications: !this.state.showMyNotifications\n    });\n  }\n\n  async componentDidMount() {\n    this.getMyNotification();\n    await this.getProfilePicture();\n    if (this.state.users.length === 0) {\n      await this.props.context.actions.setUsers();\n    }\n    this.activeUsers();\n  }\n\n  async getMyNotification() {\n    try {\n      let { response, err } = await mynotificationservice.getMyNotifications();\n      if (err) {\n        this.setState({\n          message: \"Error: \" + err\n        });\n      } else if (response && response.data.err) {\n        this.setState({\n          message: \"Error: \" + response.data.err\n        });\n      } else {\n        this.setState({\n          myNotifications: response.data\n        });\n      }\n    } catch (e) {\n      console.error(\"Error fetching notifications:\", e);\n    }\n  }\n\n  async getProfilePicture() {\n    try {\n      let { response, err } = await userservice.getProfilePicture(\n        this.state.userId\n      );\n      if (err) {\n        this.setState({\n          message: \"Error: \" + err\n        });\n      } else if (response && response.data.err) {\n        this.setState({\n          message: \"Error: \" + response.data.err\n        });\n      } else {\n        this.props.context.actions.updateState(\n          \"profilePicture\",\n          response.data.profilePicture\n        );\n        this.setState({\n          profilePicture: response.data.profilePicture\n        });\n      }\n    } catch (e) {\n      console.error(\"Error fetching profile picture:\", e);\n    }\n  }\n\n  updateNotifications(updatedNotification) {\n    let filteredNotifications = this.state.myNotifications.filter(f => {\n      return f._id !== updatedNotification._id;\n    });\n    this.setState({\n      myNotifications: filteredNotifications\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      dataMessage: nextProps.context.state.dataMessage,\n      users: nextProps.context.state.users,\n      chatWindows: nextProps.context.state.chatWindows\n    });\n  }\n\n  activeUsers() {\n    let userId = Auth.get(\"userId\");\n    this.socket.emit(\"new user\", userId);\n    this.socket.on(\"userId\", userId => {\n      // console.log(\"users Acive\", userId)\n    });\n\n    this.socket.on(\"showUsers\", users => {\n      let userNameArray = [];\n      for (let i = 0; i < this.state.users.length; i++) {\n        for (let j = 0; j < users.length; j++) {\n          if (this.state.users[i]._id === users[j]) {\n            userNameArray.push(this.state.users[i].name);\n          }\n        }\n      }\n      this.props.context.actions.updateState(\"activeUsers\", userNameArray);\n      this.setState({\n        activeUsers: userNameArray\n      });\n    });\n  }\n\n  render() {\n    let user = Auth.get(\"userName\");\n    let UserPicUrl = \"\";\n    if (this.state.profilePicture) {\n      UserPicUrl = `${config.profileUrl}${this.state.userId}/${this.state.profilePicture}`;\n    }\n    return (\n      <header className=\"header\">\n        <nav className=\"navbar fixed-top\">\n          <div className=\"navbar-holder d-flex align-items-center justify-content-between\">\n            <div className=\"navbar-header\">\n              <a id=\"toggle-menu\" href=\"#\" className=\"menu-btn\">\n                <i className=\"fas fa-bars\" />\n              </a>\n            </div>\n            <ul className=\"nav-menu list-unstyled d-flex flex-md-row align-items-md-center\">\n              <li>\n                <span className=\"userinfo mr-2\">\n                  {\" \"}\n                  Welcome <strong>{user}</strong>\n                </span>\n              </li>\n              <li className=\"nav-item\">\n                <Link to={\"/projects/favorites/Projectlist\"} className=\"nav-link\">\n                  <i className=\"fa fa-star\" />\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to={\"/chat\"} className=\"nav-link\">\n                  <i className=\"fa fa-comment\" />\n                </Link>\n              </li>\n              <li className=\"nav-item dropdown\">\n                <a\n                  id=\"notifications\"\n                  rel=\"nofollow\"\n                  data-target=\"#\"\n                  href=\"#\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                  className=\"nav-link\"\n                  onClick={this.toggleShowMyNotifications}\n                >\n                  <i className=\"fa fa-bell\" />\n                  <span className=\"badge \" style={{ backgorund: \"#fff\", color: \"#000\" }}>\n                    {this.state.myNotifications.length}\n                  </span>\n                </a>\n                <ul aria-labelledby=\"notifications\" id=\"notification-menu\" className=\"dropdown-menu\">\n                  {this.state.showMyNotifications ? (\n                    <MyNotifications\n                      myNotifications={this.state.myNotifications}\n                      updateNotifications={this.updateNotifications}\n                    />\n                  ) : (\n                    \"\"\n                  )}\n                </ul>\n              </li>\n              <li className=\"nav-item\">\n                <div\n                  className=\"nav-icons nav-userprofile order-sm-12 navbar-toggler-icons text-white\"\n                  onClick={this.toggleShowMenu}\n                >\n                  {this.state.profilePicture ? (\n                    <img src={UserPicUrl} alt=\"User Profile\" className=\"user-profile-img\" />\n                  ) : (\n                    <i className=\"fa fa-user\" />\n                  )}\n                  <div className=\"toggleMenu\">{this.state.show ? <UserMenu user={user} context={this.props.context} /> : \"\"}</div>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </header>\n    );\n  }\n}\n\n\n\n\n\n\n\n// import React from \"react\";\n// import userMenuRoute from \"../routes/user-menu/route.jsx\"\n// import io from \"socket.io-client\";\n// import Auth from \"../utils/auth.jsx\"\n// // import Menu from \"./menu.js\";\n// // import $ from '../../public/jquery-3.3.1.slim.min';\n// import MyNotifications from \"../Components/my-notification/components/my-notifications.jsx\";\n// import config from '../common/config.jsx';\n// // import * as userservice from \"../Services/user/user-service\";\n// import { Link } from \"@remix-run/react\";\n// import { addMessage } from \"../common/add_message.jsx\";\n// // import { from } from 'rxjs';\n\n// export default class Header extends React.Component {\n//   constructor(props) {\n//     super(props);\n\n//     // Initialize state with default values\n//     this.state = {\n//       isLoggedOut: false,\n//       show: false,\n//       showMyNotifications: false,\n//       myNotifications: [],\n//       userId: Auth.get(\"userId\"),\n//       profilePicture: \"\",\n//       users: [],\n//       dataMessage: null,\n//       chatWindows: []\n//     };\n\n//     // Bind event handlers\n//     this.toggleShowMenu = this.toggleShowMenu.bind(this);\n//     this.toggleShowMyNotifications = this.toggleShowMyNotifications.bind(this);\n//     this.updateNotifications = this.updateNotifications.bind(this);\n//     // Initialize socket connection\n//     this.socket = io.connect(\"/\", {\n//       secure: true,\n//       path: \"/chat/socket.io\"\n//     });\n//     this.userId = Auth.get(\"userId\");\n//     this.socket.emit(\"my notification userId\", this.userId);\n//     this.socket.on(\"notificationList\", myNotification => {\n//       this.setState({\n//         myNotifications: [...this.state.myNotifications, myNotification]\n//       });\n//     });\n//     this.socket.on(\"RECEIVE_HEADER_MESSAGE\", data => {\n//       let userName = Auth.get(\"userName\");\n//       let userId = Auth.get(\"userId\");\n//       if (data.toUser === userId) {\n//         this.setState({\n//           dataMessage: data\n//         });\n//         if (data.groupName === \"\") {\n//           if (data.toUser === userId || userName === data.author) {\n//             if (!this.props.context.state.chatWindows.length) {\n//               addMessage(data, this);\n//             }\n//           }\n//         } else {\n//           if (!this.props.context.state.chatWindows.length) {\n//             addMessage(data, this);\n//           }\n//         }\n//       }\n//       this.props.context.actions.updateState(\"dataMessage\", data);\n//     });\n//   }\n\n\n//   toggleShowMenu() {\n//     this.setState({\n//       show: !this.state.show\n//     });\n//   }\n\n\n\n\n\n//   toggleShowMyNotifications() {\n//     this.setState({\n//       showMyNotifications: !this.state.showMyNotifications\n//     });\n//   }\n\n//   async componentDidMount() {\n//     this.getMyNotification();\n//     await this.getProfilePicture();\n//     if (this.state.users.length === 0) {\n//       await this.props.context.actions.setUsers();\n//     }\n//     this.activeUsers();\n//   }\n//   async getMyNotification() {\n//     let { response, err } = await mynotificationservice.getMyNotifications();\n//     if (err) {\n//       this.setState({\n//         message: \"Error: \" + err\n//       });\n//     } else if (response && response.data.err) {\n//       this.setState({\n//         message: \"Error: \" + response.data.err\n//       });\n//     } else {\n//       this.setState({\n//         myNotifications: response.data\n//       });\n//     }\n//   }\n\n//   async getProfilePicture() {\n//     let { response, err } = await userservice.getProfilePicture(\n//       this.state.userId\n//     );\n//     if (err) {\n//       this.setState({\n//         message: \"Error: \" + err\n//       });\n//     } else if (response && response.data.err) {\n//       this.setState({\n//         message: \"Error: \" + response.data.err\n//       });\n//     } else {\n//       this.props.context.actions.updateState(\"profilePicture\", response.data.profilePicture);\n//       this.setState({\n//         profilePicture: response.data.profilePicture\n//       });\n//     }\n//   }\n\n//   updateNotifications(updatedNotification) {\n//     let filteredNotifications = this.state.myNotifications.filter(f => {\n//       return f._id !== updatedNotification._id;\n//     });\n//     this.setState({\n//       myNotifications: filteredNotifications\n//     });\n//   }\n//   componentWillReceiveProps(nextProps) {\n//     this.setState({\n//       dataMessage: nextProps.context.state.dataMessage,\n//       users: nextProps.context.state.users,\n//       chatWindows: nextProps.context.state.chatWindows\n//     });\n//   }\n//   activeUsers() {\n//     let userId = Auth.get(\"userId\");\n//     this.socket.emit(\"new user\", userId);\n//     this.socket.on(\"userId\", userId => {\n//       // console.log(\"users Acive\", userId)\n//     });\n\n//     this.socket.on(\"showUsers\", users => {\n//       let userNameArray = [];\n//       for (let i = 0; i < this.state.users.length; i++) {\n//         for (let j = 0; j < users.length; j++) {\n//           if (this.state.users[i]._id === users[j]) {\n//             userNameArray.push(this.state.users[i].name);\n//           }\n//         }\n//       }\n//       this.props.context.actions.updateState(\"activeUsers\", userNameArray);\n//       this.setState({\n//         activeUsers: userNameArray\n//       });\n//     });\n//   }\n\n//   render() {\n\n//     document.onclick = function (e) {\n//       var t = e.target;\n//       if (\n//         t.classList.contains(\"nav-userprofile\")\n//       ) {\n//         return false;\n//       }\n\n//     };\n\n\n//     let user = Auth.get(\"userName\");\n//     let UserPicUrl = \"\";\n//     if (this.state.profilePicture) {\n//       UserPicUrl = `${config.profileUrl}${this.state.userId}/${this.state.profilePicture}`;\n//     }\n//     return (\n//       <header className=\"header\">\n//         <nav className=\"navbar fixed-top\">\n//           <div className=\"navbar-holder d-flex align-items-center justify-content-between\">\n//             <div className=\"navbar-header\">\n//               <a id=\"toggle-menu\" href=\"#\" className=\"menu-btn\" >\n//                 <i className=\"fas fa-bars\" />\n//               </a>\n//               {/* // <span className=\"project-title text-white-50\">Project Name</span> */}\n//             </div>\n//             {/* <span className=\"userinfo mr-2 float-right\"> Welcome <strong>{user}</strong></span> */}\n//             <ul className=\"nav-menu list-unstyled d-flex flex-md-row align-items-md-center\">\n//               <li><span className=\"userinfo mr-2\"> Welcome <strong>{user}</strong></span></li>\n\n//               <li className=\"nav-item\">\n//                 <Link to={\"/projects/favorites/Projectlist\"} className=\"nav-link\">\n//                   <i className=\"fa fa-star\" />\n//                 </Link>\n//               </li>\n\n//               <li className=\"nav-item\">\n//                 <Link to={\"/chat\"} className=\"nav-link\">\n//                   <i className=\"fa fa-comment\" />\n//                 </Link>\n//               </li>\n\n//               <li className=\"nav-item dropdown\">\n//                 {\" \"}\n//                 <a\n//                   id=\"notifications\"\n//                   rel=\"nofollow\"\n//                   data-target=\"#\"\n//                   href=\"#\"\n//                   data-toggle=\"dropdown\"\n//                   aria-haspopup=\"true\"\n//                   aria-expanded=\"false\"\n//                   className=\"nav-link\"\n//                   onClick={this.toggleShowMyNotifications}\n//                 >\n//                   <i className=\"fa fa-bell\" />\n//                   <span className=\"badge \" style={{backgorund:\"#fff\", color: \"#000\"}}>\n//                     {this.state.myNotifications.length}\n//                   </span>\n//                 </a>\n//                 <ul aria-labelledby=\"notifications\" id=\"notification-menu\" className=\"dropdown-menu\">\n\n//                   {this.state.showMyNotifications ? (\n//                     <MyNotifications\n//                       myNotifications={this.state.myNotifications}\n//                       updateNotifications={this.updateNotifications}\n//                     />\n//                   ) : (\n//                       \"\"\n//                     )}\n\n//                 </ul>\n//               </li>\n\n              \n//               <li className=\"nav-item\">\n//                 <div\n//                   className=\"nav-icons nav-userprofile order-sm-12 navbar-toggler-icons text-white\"\n//                   onClick={this.toggleShowMenu}\n//                 >\n//                   {this.state.profilePicture ?\n//                     <img src={UserPicUrl} alt=\"User Profile\" className=\"user-profile-img\" /> :\n//                     <i className=\"fa fa-user\" />}\n//                   <div\n//                     className=\"toggleMenu\"\n\n//                   >\n//                     {this.state.show ? <UserMenu user={user} context={this.props.context} /> : \"\"}\n//                   </div>\n//                 </div>\n//               </li>\n\n//             </ul>\n//             {/* \n//               <div className=\"nav-icons nav-notifications order-sm-11 notification-header mr-2 navbar-toggler-icons\" onClick={this.toggleShowMyNotifications}>\n//                 <big>\n//                   <i className=\"far fa-bell\">\n//                     <span className=\"text\">\n//                       <span style={{ color: \"white\" }}>\n//                         {this.state.myNotifications.length}\n//                       </span>\n//                     </span>\n//                   </i>\n//                 </big>\n\n//                 <div className=\"toggleMenu notification-display-box\">\n//                   {this.state.showMyNotifications ? (\n//                     <MyNotifications\n//                       myNotifications={this.state.myNotifications}\n//                       updateNotifications={this.updateNotifications}\n//                     />\n//                   ) : (\n//                     \"\"\n//                   )}\n//                 </div>\n//               </div>\n//                */}\n//           </div>\n//         </nav>\n//       </header>\n//     );\n//   }\n// }\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/common/add_message.jsx\"\n);\nimport.meta.hot.lastModified = \"1709382069643.5525\";\n}\n// REMIX HMR END\n\n\nimport Auth from '../utils/auth';\nexport const addMessage = (data,that) => {\n\n    let userName = Auth.get('userName');\n    let userId = Auth.get('userId');\n    let chatWindows = Object.assign([], that.state.chatWindows);\n    let messages = Object.assign([], that.state.messages);\n    let fromUser = that.state.users && that.state.users.filter((u) => {\n        return u._id === data.toUser\n\n    })\n    let fromUserName = fromUser.length > 0 ? fromUser[0].name : '';\n    let id = that.state.users && that.state.users.filter((u) => {\n        return u.name === data.author\n\n    })\n    let uId = id.length > 0 ? id[0]._id : '';\n    let userCondition = (data.groupName === '') ? userName !== data.author && userId === data.toUser : userName !== data.author\n\n    if (userCondition) {\n        let chatWindow = null,\n            chatWindowsCount = chatWindows.length;\n        let isWindowExists = false;\n\n        if (chatWindowsCount > 0) {\n            for (let i = 0; i < chatWindowsCount; ++i) {\n                if (data.groupName === chatWindows[i].name || data.author === chatWindows[i].name) {\n                    isWindowExists = true;\n                    if (!chatWindows[i].messages || chatWindows[i].messages.length <= 0) {\n                        chatWindows[i].messages = [];\n                    }\n                    for (let j = 0; j < chatWindows[i].messages.length; j++) {\n                        let userMsgCondition = (data.groupName === '') ?\n                            ((chatWindows[i].messages[j].chatId === (userId + \"-\" + uId)) || (chatWindows[i].messages[j].chatId === (uId + \"-\" + userId)))\n                            :\n                            (chatWindows[i].messages[j].chatId === that.state.groupId)\n                        if (userMsgCondition) {\n                            let msgObj = {\n                                userName: (data.groupName !== \"\") ? data.author : data.author,\n                                msgText: data.message\n                            }\n                            chatWindows[i].messages[j].msgList.push(msgObj);\n\n                        }\n                    } if (chatWindows[i].messages.length === 0) {\n                        let chatObj = {\n                            chatId: (data.groupName === \"\") ? userId + \"-\" + that.state.toSendMessages : data.toUser + '-' + data.groupName,\n                            msgList: []\n                        }\n                        let msgObj = {\n                            userName: (data.groupName !== \"\") ? data.author : fromUserName,\n                            msgText: data.message\n                        }\n                        chatObj.msgList.push(msgObj);\n                        chatWindows[i].messages.push(chatObj);\n                    }\n                    messages = chatWindows[i].messages;\n                }\n            }\n        }\n\n        if (!isWindowExists) {\n\n            let messagesToAdd = [];\n            let chatObj = {\n                chatId: (data.groupName === \"\") ? userId + \"-\" + uId : data.toUser + '-' + data.groupName,\n                msgList: []\n            }\n            let msgObj = {\n                userName: (data.groupName !== \"\") ? data.author : data.author,\n                msgText: data.message\n            }\n            chatObj.msgList.push(msgObj);\n            messagesToAdd.push(chatObj);\n\n            chatWindow = {\n                name: (data.groupName !== \"\") ? data.groupName : data.author,\n                id: uId,\n                messages: messagesToAdd\n            }\n            messages = messagesToAdd;\n            chatWindows.push(chatWindow);\n        }\n    } else {\n        //let chatWindow = null,\n        let chatWindowsCount = chatWindows.length;\n        //let isWindowExists = false;\n        if (chatWindowsCount > 0) {\n            let fromUser = that.state.users && that.state.users.filter((u) => {\n                return u._id === data.toUser\n            })\n            let fromUserName = fromUser.length > 0 ? fromUser[0].name : '';\n            for (let i = 0; i < chatWindowsCount; ++i) {\n                if (data.groupName === chatWindows[i].name || fromUserName === chatWindows[i].name) {\n                    //isWindowExists = true;\n\n                    if (!chatWindows[i].messages || chatWindows[i].messages.length <= 0) {\n                        chatWindows[i].messages = [];\n                    }\n                    for (let j = 0; j < chatWindows[i].messages.length; j++) {\n                        let userMsgCondition = (data.groupName === '') ?\n                            ((chatWindows[i].messages[j].chatId === (userId + \"-\" + data.toUser)) || (chatWindows[i].messages[j].chatId === (data.toUser + \"-\" + userId)))\n                            : (chatWindows[i].messages[j].chatId === that.state.groupId)\n                        if (userMsgCondition) {\n                            let msgObj = {\n                                userName: (data.groupName !== \"\") ? data.author : data.author,\n                                msgText: data.message\n                            }\n                            chatWindows[i].messages[j].msgList.push(msgObj);\n\n                        }\n                    } if (chatWindows[i].messages.length === 0) {\n                        let chatObj = {\n                            chatId: (data.groupName === \"\") ? userId + \"-\" + that.state.toSendMessages : data.toUser + '-' + data.groupName,\n                            msgList: []\n                        }\n                        let msgObj = {\n                            userName: (data.groupName !== \"\") ? data.author : data.author,\n                            msgText: data.message\n                        }\n                        chatObj.msgList.push(msgObj);\n                        chatWindows[i].messages.push(chatObj);\n                    }\n                    messages = chatWindows[i].messages;\n                }\n            }\n        }\n    }\n    // else{\n    //     console.log(\"Thrid User\");\n    // }\n    that.props.context.actions.updateState(\"chatWindows\", chatWindows)\n    that.setState({\n        messages: messages,\n        chatWindows: chatWindows\n    });\n};\n"],
  "mappings": "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",
  "names": ["fromUser", "fromUserName", "React", "userId"]
}
