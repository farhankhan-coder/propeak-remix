{
  "version": 3,
  "sources": ["../../../app/Components/summary/summary.jsx", "../../../app/models/task/task-model.ts", "../../../app/Services/task/task-service.jsx", "../../../app/routes/dashboard/route.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/Components/summary/summary.jsx\"\n);\n\n}\n// REMIX HMR END\n\n\nimport React, { Component } from \"react\";\nimport Auth from \"../../utils/auth\";\nimport \"./summary.css?__remix_sideEffect__\";\nimport { Link } from \"react-router-dom\";\nimport DataTable from \"../datatable\";\nimport * as taskService from \"../../Services/task/task-service\";\nimport * as dateUtil from \"../../utils/date-util\";\nimport config from \"../../common/config\";\nimport { PieChart, Pie, Legend, Tooltip, Cell, ResponsiveContainer } from \"recharts\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid } from \"recharts\";\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({\n  cx,\n  cy,\n  midAngle,\n  innerRadius,\n  outerRadius,\n  percent,\n  index\n}) => {\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.2;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n  return (\n    <text\n      x={x}\n      y={y}\n      fill=\"white\"\n      textAnchor={x > cx ? \"start\" : \"end\"}\n      dominantBaseline=\"central\">\n\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>);\n\n};\n\nexport default class Summary extends Component {\n  constructor(props) {\n    super(props);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.reset = this.reset.bind(this);\n    this.submit = this.submit.bind(this);\n\n    this.headerwidth;\n\n    // Initialize state with default values or empty objects to prevent errors\n    this.state = {\n      data: [],\n      chartData: [],\n      userProductivityData: [],\n      overDueData: [],\n      todayData: 0,\n      colors: {\n        New: \"#5feae4\",\n        Running: \"#ffff00\",\n        Completed: \"#4bef41\",\n        OnHold: \"#adafa7fc\",\n        Overdue: \"#ea2b2b\",\n        FutureTask: \"#136ec8\"\n      },\n      projectData: props.context && props.context.state ? props.context.state.projectData : [],\n      isLoaded: true,\n      headers: [\n      {\n        title: \"Project Title\",\n        accessor: \"projectTitle\",\n        index: 0,\n        cell: (row) => {\n          let url = \"/project/tasks/\" + row.projectId;\n          return <Link to={url}>{row.projectTitle} </Link>;\n        }\n      },\n      {\n        title: \"User Name\",\n        accessor: \"userName\",\n        index: 1,\n        cell: (row) => {\n          let url = \"/userPerformanceReports/\" + row.userId;\n          return <Link to={url}>{row.userName} </Link>;\n        }\n      },\n      { title: \"Task Title\", accessor: \"title\", index: 2 },\n      { title: \"Start Date\", accessor: \"startDate\", index: 3 },\n      { title: \"End Date\", accessor: \"endDate\", index: 4 }],\n\n      hightlightRow: {\n        accessor: \"status\",\n        className: \"errorRow\"\n      },\n      hiddenProjectId: \"\",\n      totalProjects: props.context && props.context.state ? props.context.state.totalProjects : 0,\n      flag: 'duetoday',\n      projectStatus: props.context && props.context.state ? props.context.state.projectStatus : [],\n      totalProjectUsers: props.context && props.context.state ? props.context.state.totalProjectUsers : 0,\n      showArchive: props.context && props.context.state ? props.context.state.showArchive : false\n    };\n  }\n\n  async handleInputChange(e) {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      ...this.state,\n      [name]: value\n    });\n    if (e.target.value === '') {\n      await this.setState({\n        hiddenProjectId: \"\"\n      });\n      this.getDashboardData(this.state.flag, this.state.showArchive);\n      this.props.context.actions.getAllProjectsSummary();\n    }\n  }\n\n  async reset(e) {\n    if (e) {\n      e.preventDefault();\n    }\n    await this.setState({\n      hiddenProjectId: \"\"\n    });\n    this.getDashboardData(this.state.flag, this.state.showArchive);\n    this.props.context.actions.getAllProjectsSummary();\n\n  }\n\n  async submit(e) {\n    if (e) {\n      e.preventDefault();\n    }\n    await this.getDashboardData(this.state.flag, this.state.showArchive);\n    let project = this.state.projectData.filter((p) => {\n      return p.title === this.state.hiddenProjectId;\n    });\n\n    let projectId = project.length > 0 ? project[0]._id : \"\";\n    this.props.context.actions.getAllProjectsSummary(projectId);\n  }\n\n\n  async componentDidMount() {\n    this.setState({\n      isLoaded: false\n    });\n\n    await this.getDashboardData(this.state.flag, this.state.showArchive);\n    this.props.context.actions.getAllProjectsSummary();\n    if (this.state.projectData.length === 0) {\n      this.props.context.actions.getUserProject();\n    }\n  }\n\n  async getDashboardData(flag, showArchive, e) {\n    if (e) {\n      e.preventDefault();\n    }\n    let project = this.state.projectData.filter((p) => {\n      return p.title === this.state.hiddenProjectId;\n    });\n\n    let projectId = project.length > 0 ? project[0]._id : \"\";\n    let { tasks, tasksErr } = await taskService.getDashboardData(\n      projectId, flag, showArchive\n    );\n    if (tasksErr) {\n      this.setState({\n        message: tasksErr\n      });\n    } else if (tasks && tasks.data.err) {\n      this.setState({ message: tasks.data.err });\n    } else {\n      let chartData = [];\n      let todayData = 0;\n      if (tasks.data.data.todaysTasksChartData && tasks.data.data.todaysTasksChartData.length > 0) {\n        for (let i = 0; i < tasks.data.data.todaysTasksChartData.length; i++) {\n          if (tasks.data.data.todaysTasksChartData[i].name !== 'TodaysTask') {\n            chartData.push(tasks.data.data.todaysTasksChartData[i]);\n          } else\n          {\n            todayData = tasks.data.data.todaysTasksChartData[i].value;\n          }\n        }\n      }\n      let UserProductivityData = tasks.data.data.userProductivityData && tasks.data.data.userProductivityData.length > 0 ? tasks.data.data.userProductivityData[0] : [];\n      let date = dateUtil.DateToString(new Date().toISOString());\n      if (tasks.data.data.UsersTodaysTasks.length > 0) {\n        let data = tasks.data.data.UsersTodaysTasks.map((task) => {\n          // task.startDate = dateUtil.DateToString(task.startDate);\n          // task.endDate = dateUtil.DateToString(task.endDate);\n          task.startDate = task.startDate !== undefined && task.startDate !== '' && task.startDate !== null ? dateUtil.DateToString(task.startDate) : '';\n          task.endDate = task.endDate !== undefined && task.endDate !== '' && task.endDate !== null ? dateUtil.DateToString(task.endDate) : '';\n          if (tasks.status === 'new') {\n            task.status = \"New \";\n          } else\n          if (tasks.status === 'inprogress') {\n            task.status = \"Inprogress \";\n          } else\n          if (task.startDate < date && task.endDate > date && !task.completed) {\n            task.status = \"Ongoing \";\n          } else if (task.startDate === date && task.completed) {\n            task.status = \"Todays task completed\";\n          } else if (task.startDate === date && !task.completed) {\n            task.status = \"Todays task\";\n          }\n          if (this.state.flag === \"overdue\") {\n            task.status = \"Incomplete \";\n          }\n          return task;\n        });\n        let oneDay = 0;\n        let twoDay = 0;\n        let threeDay = 0;\n        let fourDay = 0;\n        let fiveDay = 0;\n        let moreThanFiveDay = 0;\n        let overDueArray = [];\n        let overDue = \"\";\n        let obj1 = {};\n        let obj2 = {};\n        let obj3 = {};\n        let obj4 = {};\n        let obj5 = {};\n        let obj6 = {};\n\n        for (let i = 0; i < tasks.data.data.UsersTodaysTasks.length; i++) {\n          overDue = parseInt(\n            (new Date() - new Date(tasks.data.data.UsersTodaysTasks[i].endDate)) / (\n            1000 * 60 * 60 * 24),\n            10\n          );\n\n          if (overDue === 1) {\n            oneDay++;\n            obj1 = {\n              day: \"1 Day\",\n              count: oneDay\n            };\n          } else if (overDue === 2) {\n            twoDay++;\n            obj2 = {\n              day: \"2 Days\",\n              count: twoDay\n            };\n          } else if (overDue === 3) {\n            threeDay++;\n            obj3 = {\n              day: \"3 Days\",\n              count: threeDay\n            };\n          } else if (overDue === 4) {\n            fourDay++;\n            obj4 = {\n              day: \"4 Days\",\n              count: fourDay\n            };\n          } else if (overDue === 5) {\n            fiveDay++;\n            obj5 = {\n              day: \"5 Days\",\n              count: fiveDay\n            };\n          } else if (overDue > 5) {\n            moreThanFiveDay++;\n            obj6 = {\n              day: \"5+ Days\",\n              count: moreThanFiveDay\n            };\n          } else {\n          }\n        }\n        if (Object.keys(obj1).length > 0) {\n          overDueArray.push(obj1);\n        }\n        if (Object.keys(obj2).length > 0) {\n          overDueArray.push(obj2);\n        }\n        if (Object.keys(obj3).length > 0) {\n          overDueArray.push(obj3);\n        }\n        if (Object.keys(obj4).length > 0) {\n          overDueArray.push(obj4);\n        }\n        if (Object.keys(obj5).length > 0) {\n          overDueArray.push(obj5);\n        }\n        if (Object.keys(obj6).length > 0) {\n          overDueArray.push(obj6);\n        }\n\n\n        this.setState({\n          isdataLoaded: false,\n          data: data,\n          overDueData: overDueArray\n        });\n      } else\n      {\n        this.setState({\n          isdataLoaded: false,\n          data: [],\n          overDueData: []\n        });\n      }\n      this.setState({\n        chartData: chartData,\n        UserProductivityData: UserProductivityData,\n        todayData: todayData\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      projectData: nextProps.context.state.userProjectData,\n      totalProjects: nextProps.context.state.totalProjects,\n      projectStatus: nextProps.context.state.projectStatus,\n      totalProjectUsers: nextProps.context.state.totalProjectUsers,\n      showArchive: nextProps.context.state.showArchive\n    });\n  }\n\n  async showTabData(flag) {\n    this.setState({\n      flag: flag,\n      data: [],\n      isdataLoaded: true\n    });\n    this.getDashboardData(flag, this.state.showArchive);\n\n  }\n\n  renderTooltip = (props) => {\n    if (props.active) {\n      return (\n        <div style={{ border: \"1px solid #fff\" }}>{props.label}:{props.payload[0].value}</div>);\n\n    }\n    return;\n  };\n\n\n  render() {\n\n\n\n    const labelStyle = {\n      fontSize: \"small\"\n    };\n    let projects = [];\n    let totalProjects = [];\n    let totalTask = 0;\n    let incompeleteTask = 0;\n    let overdueTask = 0;\n    let onHoldTask = 0;\n    let holdProjectCount = 0;\n    let projectUserCount = 0;\n\n    let allProjects = this.state.projectData && this.state.projectData;\n    for (let i = 0; i < allProjects.length; i++) {\n      projects.push(\n        <option key={allProjects[i]._id} data-value={allProjects[i]._id}>\n          {allProjects[i].title}\n        </option>\n      );\n    }\n\n    if (this.state.totalProjects.length > 0) {\n      for (let i = 0; i < this.state.totalProjects.length; i++) {\n\n\n        totalTask = totalTask + this.state.totalProjects[i].totalTasks;\n\n        if (this.state.totalProjects[i].status === 'onHold') {\n          holdProjectCount++;\n        }\n\n        overdueTask = overdueTask + this.state.totalProjects[i].overDueTasks;\n\n        onHoldTask = onHoldTask + this.state.totalProjects[i].onHoldTasks;\n\n        incompeleteTask = incompeleteTask + this.state.totalProjects[i].incompleteTasks;\n      }\n    }\n\n    let deletedTaskCount = 0,completeTaskCount = 0,inprogressTaskCount = 0,ovedueTaskCount = 0,onHOldTaskCount = 0,openTask = 0,newTask = 0,futureTaskCount = 0;\n    if (this.state.chartData.length > 0) {\n      for (let i = 0; i < this.state.chartData.length; i++) {\n        if (this.state.chartData[i].name === \"Completed\") {\n          completeTaskCount = this.state.chartData[i].value;\n        }\n        if (this.state.chartData[i].name === \"Running\") {\n          inprogressTaskCount = this.state.chartData[i].value;\n        }\n        if (this.state.chartData[i].name === \"Overdue\") {\n          ovedueTaskCount = this.state.chartData[i].value;\n        }\n        if (this.state.chartData[i].name === \"OnHold\") {\n          onHOldTaskCount = this.state.chartData[i].value;\n        }\n        if (this.state.chartData[i].name === \"All\") {\n          openTask = this.state.chartData[i].value;\n        }\n        if (this.state.chartData[i].name === \"New\") {\n          newTask = this.state.chartData[i].value;\n        }\n        if (this.state.chartData[i].name === \"FutureTask\") {\n          futureTaskCount = this.state.chartData[i].value;\n        }\n\n      }\n    }\n    let headers = [];\n    for (let i = 0; i < this.state.headers.length; i++) {\n      if (this.state.flag === 'futureTask') {\n        if (this.state.headers[i].accessor !== 'startDate' && this.state.headers[i].accessor !== 'endDate') {\n          headers.push(this.state.headers[i]);\n        }\n      } else\n      {\n        headers.push(this.state.headers[i]);\n      }\n    }\n\n    const dataTable =\n    <DataTable\n      className=\"data-table\"\n      title=\"\"\n      keyField=\"_id\"\n      pagination={{\n        enabled: true,\n        pageLength: 50,\n        type: \"long\"\n      }}\n      width=\"100%\"\n      headers={headers}\n      data={this.state.data}\n      hightlightRow={this.state.hightlightRow}\n      noData=\"No records!\"\n      show={config.Export} />;\n\n\n\n    const dataChart =\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart margin={{ top: 10, right: 3, left: 5, bottom: 20 }} onMouseEnter={this.onPieEnter}>\n          <Pie data={this.state.chartData} labelLine={false} label={renderCustomizedLabel}\n        innerRadius={60}\n        outerRadius={90}\n        paddingAngle={0}\n        fill=\"#8884d8\" dataKey=\"value\">\n            {this.state.chartData.map((entry, index) =>\n\n          <Cell\n            key={index}\n            fill={this.state.colors[entry.name]} />\n\n          )}\n          </Pie>\n          <Tooltip />\n        </PieChart></ResponsiveContainer>;\n\n    const TiltedAxisTick = (props) => {\n      const { x, y, stroke, payload } = props;\n      return (\n        <g transform={`translate(${x},${y})`}>\n          <text\n            x={0}\n            y={0}\n            dy={10}\n            textAnchor=\"middle\"\n            width={20}\n            scaleToFit={true}\n            fontSize={9}\n            fill=\"#666\"\n            transform=\"rotate(-15)\">\n            {payload.value}\n          </text>\n        </g>);\n\n    };\n\n    const dataChartBar =\n    this.state.chartData.length > 0 && <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart margin={{ top: 10, right: 3, left: 5, bottom: 20 }} data={this.state.chartData} width=\"100%\" height=\"100%\">\n\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" tick={<TiltedAxisTick />} minTickGap={10} interval={0} />\n          <YAxis />\n          <Tooltip />\n          <Legend verticalAlign=\"bottom\" align=\"center\" layout=\"horizontal\" />\n\n          <Bar dataKey=\"value\" stackId=\"a\" name=\"Task Progress\">\n            {\n          this.state.chartData.length > 0 && this.state.chartData.map((entry, index) =>\n          <Cell key=\"value\" fill={this.state.colors[entry.name]} />\n          )}\n        </Bar>\n\n          <Tooltip content={this.renderTooltip} cursor={false}\n        wrapperStyle={{ backgroundColor: \"#f9f7f7\" }} />\n\n        </BarChart>\n      </ResponsiveContainer>;\n\n    const dataChart1 =\n    this.state.overDueData.length > 0 && <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart\n        data={this.state.overDueData ? this.state.overDueData : []}\n        margin={{ top: 5, right: 50, left: 10, bottom: 5 }}>\n\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"day\" padding={{ left: 10 }} minTickGap={10} />\n          <YAxis />\n          <Tooltip />\n          <Legend verticalAlign=\"bottom\" />\n          <Bar\n          name=\" Overdue Task Count\"\n          dataKey=\"count\"\n          stackId=\"a\"\n          fill=\"#8884d8\" />\n\n        </BarChart>\n      </ResponsiveContainer>;\n\n    var percentageTask =\n    this.state.UserProductivityData &&\n    this.state.UserProductivityData.WorkingHours !== 0 ?\n    (\n    this.state.UserProductivityData.Storypoint /\n    this.state.UserProductivityData.WorkingHours *\n    100).\n\n    toString().\n    match(/^-?\\d+(?:\\.\\d{0,2})?/) :\n    0;\n\n    return <React.Fragment>\n      {this.state.isLoaded ? <div className=\"logo\">\n        <img src=\"/images/loading.svg\" alt=\"loading\" />\n      </div> : <React.Fragment>\n          {/* form start */}\n          <div className=\"row page-summary\">\n            <div className=\"col-sm-12 col-lg-12 \">\n              {Auth.get(\"userRole\") !== \"user\" ?\n            <form>\n                  <div className=\"\">\n                    <div className=\" mt-2\">\n                      <div className=\"d-flex justify-content-end\">\n                        <div className=\"flex-item\">\n                          <div className=\"form-group\">\n                            <input type=\"text\" value={this.state.hiddenProjectId} list=\"data\" onChange={this.handleInputChange} name=\"hiddenProjectId\" className=\"form-control select-project rounded-0\" autoComplete=\"off\" placeholder=\"Select Project\" />\n                            <datalist id=\"data\">\n                              {projects}\n                            </datalist>\n                          </div>\n                        </div>\n                        <div className=\"flex-item\">\n                          <div className=\"form-group\">\n                            <button onClick={this.submit} type=\"submit\" className=\"btn btn-md btn-default rounded-0 border-0\" value=\"\" disabled={!this.state.hiddenProjectId}>\n                              <span role=\"img\" aria-labelledby=\"Search\">&#x1F50D;</span>\n                            </button>\n                          </div>\n                        </div>\n                        <div className=\"flex-item ml-0\">\n                          {/* <button onClick={this.reset} className=\"btn btn-md btn-warning rounded-0 border-0\"> */}\n                          <button onClick={this.reset} className=\"btn btn-md btn-danger  border-0\">\n                            X\n                                  </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </form> :\n            \"\"}\n            </div>\n          </div>\n          {/* form end */}\n\n          <div className=\"dashboard box-wrapper d-flex justify-content-between align-self-center mb-2\">\n            <div className=\"summary-box  default-task-border\">\n              <span>\n                <span className=\"lbl-no\">\n                  {this.state.totalProjects.length}\n                </span><small style={{ color: \"red\" }} title=\"Hold Project\">\n                  ({holdProjectCount}) </small> </span>\n              <div className=\"lbl-text\">\n                Projects\n              </div>\n            </div>\n\n            <div className=\"summary-box default-task-border\">\n              <div className=\"lbl-no\">\n                {totalTask}\n              </div>\n              <div className=\"lbl-text\">\n                All Tasks\n              </div>\n            </div>\n\n            <div className=\"summary-box running-task-border\">\n              <div className=\"lbl-no\">\n                {incompeleteTask}\n              </div>\n              <div className=\"lbl-text\">\n                Running Tasks\n              </div>\n            </div>\n\n            <div className=\"summary-box  overdue-task-border\">\n              <div className=\"lbl-no\">\n                {overdueTask}\n              </div>\n              <div className=\"lbl-text\">\n                Overdue Tasks\n              </div>\n            </div>\n\n            <div className=\"summary-box onhold-task-border\">\n              <div className=\"lbl-no\">\n                {onHoldTask}\n              </div>\n              <div className=\"lbl-text\">\n                OnHold Tasks\n              </div>\n            </div>\n\n            <div className=\"summary-box default-task-border\">\n              <div className=\"lbl-no\">\n                {this.state.totalProjectUsers}\n              </div>\n              <div className=\"lbl-text\">\n                Project Member\n              </div>\n            </div>\n          </div>\n\n          <div className=\"row equal-height-container\">\n            <div className=\"col-sm-12 col-lg-9 first\">\n              <h6 className=\"task-title  mb-3 mt-2 bb-dotted \">Tasks Info</h6>\n              <nav>\n                <div className=\"nav nav-tabs nav-fill\" id=\"myTab\" role=\"tablist\">\n                  <a onClick={this.showTabData.bind(this, 'duetoday')} className=\"nav-item nav-link active\" id=\"assigned-tab\" data-toggle=\"tab\" href=\"#todays\" role=\"tab\" aria-controls=\"todays\" aria-selected=\"true\">Today's  <span style={{ color: \"rgb(255, 152, 0)\" }} className=\"task-count\">({this.state.flag === 'duetoday' && this.state.data ? this.state.data.length : 0})</span></a>\n                  <a onClick={this.showTabData.bind(this, 'newTask')} className=\"nav-item nav-link\" id=\"profile-tab\" data-toggle=\"tab\" href=\"#newtask\" role=\"tab\" aria-controls=\"newtask\" aria-selected=\"false\">New  <span style={{ color: \"rgb(255, 152, 0)\" }}>({newTask})</span></a>\n                  <a onClick={this.showTabData.bind(this, 'inprogress')} className=\"nav-item nav-link\" id=\"overdue-tab\" data-toggle=\"tab\" href=\"#runningtask\" role=\"tab\" aria-controls=\"runningtask\" aria-selected=\"false\">Running <span style={{ color: \"rgb(255, 152, 0)\" }}>({inprogressTaskCount})</span></a>\n                  <a onClick={this.showTabData.bind(this, 'overdue')} className=\"nav-item nav-link\" id=\"overduetask-tab\" data-toggle=\"tab\" href=\"#overduetask\" role=\"tab\" aria-controls=\"overduetask\" aria-selected=\"false\">Overdue <span style={{ color: \"rgb(255, 152, 0)\" }}>({ovedueTaskCount})</span></a>\n                  <a onClick={this.showTabData.bind(this, 'onhold')} className=\"nav-item nav-link\" id=\"onhold-tab\" data-toggle=\"tab\" href=\"#onhold\" role=\"tab\" aria-controls=\"onhold\" aria-selected=\"false\">OnHold <span style={{ color: \"rgb(255, 152, 0)\" }}>({onHOldTaskCount})</span></a>\n                  <a onClick={this.showTabData.bind(this, 'futureTask')} className=\"nav-item nav-link\" id=\"futuretask-tab\" data-toggle=\"tab\" href=\"#futureTask\" role=\"tab\" aria-controls=\"futureTask\" aria-selected=\"false\">Future Task <span style={{ color: \"rgb(255, 152, 0)\" }}>({futureTaskCount})</span></a>\n                </div>\n              </nav>\n\n              <div className=\"tab-content\" id=\"myTabContent\">\n                <div className=\"tab-pane fade show active\" id=\"todays\" role=\"tabpanel\" aria-labelledby=\"todays-tab\">\n                  {this.state.isdataLoaded && this.state.data.length === 0 ?\n                <div className=\"datalogo\">\n                      <img src=\"/images/loading.svg\" alt=\"loading\" />\n                    </div> : <div> {dataTable}</div>}\n                </div>\n                <div className=\"tab-pane fade\" id=\"newtask\" role=\"tabpanel\" aria-labelledby=\"newtask-tab\">\n                  {this.state.isdataLoaded && this.state.data.length === 0 ?\n                <div className=\"datalogo\">\n                      <img src=\"/images/loading.svg\" alt=\"loading\" />\n                    </div> : <div> {dataTable}</div>}\n                </div>\n                <div className=\"tab-pane fade\" id=\"runningtask\" role=\"tabpanel\" aria-labelledby=\"runningtask-tab\">\n                  {this.state.isdataLoaded && this.state.data.length === 0 ?\n                <div className=\"datalogo\">\n                      <img src=\"/images/loading.svg\" alt=\"loading\" />\n                    </div> : <div> {dataTable}</div>}\n                </div>\n                <div className=\"tab-pane fade\" id=\"overduetask\" role=\"tabpanel\" aria-labelledby=\"overduetask-tab\">\n                  {this.state.isdataLoaded && this.state.data.length === 0 ?\n                <div className=\"datalogo\">\n                      <img src=\"/images/loading.svg\" alt=\"loading\" />\n                    </div> : <div> {dataTable}</div>}\n                </div>\n                <div className=\"tab-pane fade\" id=\"onhold\" role=\"tabpanel\" aria-labelledby=\"onhold-tab\">\n                  {this.state.isdataLoaded && this.state.data.length === 0 ?\n                <div className=\"datalogo\">\n                      <img src=\"/images/loading.svg\" alt=\"loading\" />\n                    </div> : <div> {dataTable}</div>}\n                </div>\n                <div className=\"tab-pane fade\" id=\"cancelled\" role=\"tabpanel\" aria-labelledby=\"cancelled-tab\">\n                  {this.state.isdataLoaded && this.state.data.length === 0 ?\n                <div className=\"datalogo\">\n                      <img src=\"/images/loading.svg\" alt=\"loading\" />\n                    </div> : <div> {dataTable}</div>}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"col-sm-12 col-lg-3 second\" style={{ background: \"white\" }}>\n              <h6 className=\"task-title  mb-2 mt-2 bb-dotted\">Task Statistics</h6>\n              <div className=\" reportscrollbar\" ref=\"pieChartData\" style={{ height: \"225px\" }}>\n                {dataChartBar}\n              </div>\n              <div className=\"row\">\n                <div className=\"col-xs-12 col-sm-6 col-md-6 col-lg-12\">\n                  <ul className=\"summary-list list-group list-group-flush task-status-right mb-2 mt-1\">\n                    {/* <h6 className=\"task-title mb-2 text-center bb-dotted\">Projects </h6> */}\n                    {/* <li className=\"list-group-item d-flex justify-content-between\" style={{borderLeft:\"5px solid #f39406fc\"}}><span><strong>All</strong> </span> <span>{openTask}</span> </li> */}\n                    <li className=\"list-group-item d-flex justify-content-between\" style={{ borderLeft: \"5px solid #5feae4\" }}><span><strong>New </strong></span> <span><strong>{newTask}</strong></span> </li>\n                    <li className=\"list-group-item d-flex justify-content-between\" style={{ borderLeft: \"5px solid #ffff00\" }}><span><strong>Running </strong></span> <span>{inprogressTaskCount}</span> </li>\n                    <li className=\"list-group-item d-flex justify-content-between\" style={{ borderLeft: \"5px solid #ea2b2b\" }}><span><strong>Overdue</strong></span> <span>{ovedueTaskCount}</span> </li>\n                    <li className=\"list-group-item d-flex justify-content-between\" style={{ borderLeft: \"5px solid #adafa7fc\" }}><span><strong>OnHold</strong></span> <span>{onHOldTaskCount}</span> </li>\n                    {/* <li className=\"list-group-item d-flex justify-content-between\"><span>Cancelled</span> <span>{deletedTaskCount}</span> </li> */}\n                    <li className=\"list-group-item d-flex justify-content-between\" style={{ borderLeft: \"5px solid #4bef41\" }}><span><strong>Completed </strong></span> <span>{completeTaskCount}</span> </li>\n                    <li className=\"list-group-item d-flex justify-content-between\" style={{ borderLeft: \"5px solid #136ec8\" }}><span><strong>Future Task </strong></span> <span>{futureTaskCount}</span> </li>\n                  </ul>\n                </div>\n                <div className=\"col-xs-12 col-sm-6 col-md-6 col-lg-12\" style={{ height: \"250px\" }}>\n                  {dataChart1}\n                </div>\n              </div>\n            </div>\n          </div>\n        </React.Fragment>}\n    </React.Fragment>;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from \"react\";\n// import Auth from \"../../utils/auth\";\n// import \"./summary.css\";\n// import { Link } from \"react-router-dom\";\n// import DataTable from \"../datatable\";\n// import * as taskService from \"../../Services/task/task-service\";\n// import * as dateUtil from \"../../utils/date-util\";\n// import config from \"../../common/config\";\n// import { PieChart, Pie, Legend, Tooltip, Cell, ResponsiveContainer } from \"recharts\";\n// import { BarChart, Bar, XAxis, YAxis, CartesianGrid } from \"recharts\";\n// const RADIAN = Math.PI / 180;\n// const renderCustomizedLabel = ({\n//   cx,\n//   cy,\n//   midAngle,\n//   innerRadius,\n//   outerRadius,\n//   percent,\n//   index\n// }) => {\n//   const radius = innerRadius + (outerRadius - innerRadius) * 0.2;\n//   const x = cx + radius * Math.cos(-midAngle * RADIAN);\n//   const y = cy + radius * Math.sin(-midAngle * RADIAN);\n//   return (\n//     <text\n//       x={x}\n//       y={y}\n//       fill=\"white\"\n//       textAnchor={x > cx ? \"start\" : \"end\"}\n//       dominantBaseline=\"central\"\n//     >\n//       {`${(percent * 100).toFixed(0)}%`}\n//     </text>\n//   );\n// };\n\n// export default class Summary extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleInputChange = this.handleInputChange.bind(this);\n//     this.reset = this.reset.bind(this);\n//     this.submit = this.submit.bind(this);\n\n//     this.headerwidth;\n//   }\n//   state = {\n//     data: [],                    \n//     chartData: [],\n//     userProductivityData: [],\n//     overDueData: [],\n//     todayData: 0,\n//     colors: {\n//       New: \"#5feae4\",\n//       Running: \"#ffff00\",\n//       Completed: \"#4bef41\",\n//       OnHold: \"#adafa7fc\",\n//       Overdue: \"#ea2b2b\",\n//       FutureTask: \"#136ec8\"\n//     },\n//     projectData: [],\n//     isLoaded: true,\n//     headers: [\n//       {\n//         title: \"Project Title\",\n//         accessor: \"projectTitle\",\n//         index: 0,\n//         cell: row => {\n//           let url = \"/project/tasks/\" + row.projectId;\n//           return <Link to={url}>{row.projectTitle} </Link>;\n//         }\n//       },\n//       {\n//         title: \"User Name\",\n//         accessor: \"userName\",\n//         index: 1,\n//         cell: row => {\n//           let url = \"/userPerformanceReports/\" + row.userId;\n//           return <Link to={url}>{row.userName} </Link>;\n//         }\n//       },\n//       { title: \"Task Title\", accessor: \"title\", index: 2 },\n//       { title: \"Start Date\", accessor: \"startDate\", index: 3 },\n//       { title: \"End Date\", accessor: \"endDate\", index: 4 },\n//     ],\n//     hightlightRow: {\n//       accessor: \"status\",\n//       className: \"errorRow\"\n//     },\n//     hiddenProjectId: \"\",\n//     totalProjects: 0,\n//     flag: 'duetoday',\n//     projectStatus: \"\",\n//     totalProjectUsers: 0,\n//     showArchive: false\n//   };\n\n//   async handleInputChange(e) {\n//     const target = e.target;\n//     const value = target.value;\n//     const name = target.name;\n\n//     this.setState({\n//       ...this.state,\n//       [name]: value\n//     });\n//     if (e.target.value === '') {\n//       await this.setState({\n//         hiddenProjectId: \"\"\n//       })\n//       this.getDashboardData(this.state.flag, this.state.showArchive);\n//       this.props.context.actions.getAllProjectsSummary();\n//     }\n//   }\n\n//   async reset(e) {\n//     if (e) {\n//       e.preventDefault();\n//     }\n//     await this.setState({\n//       hiddenProjectId: \"\"\n//     })\n//     this.getDashboardData(this.state.flag, this.state.showArchive)\n//     this.props.context.actions.getAllProjectsSummary()\n\n//   }\n\n//   async submit(e) {\n//     if (e) {\n//       e.preventDefault();\n//     }\n//     await this.getDashboardData(this.state.flag, this.state.showArchive)\n//     let project = this.state.projectData.filter(p => {\n//       return p.title === this.state.hiddenProjectId;\n//     });\n\n//     let projectId = project.length > 0 ? project[0]._id : \"\";\n//     this.props.context.actions.getAllProjectsSummary(projectId)\n//   }\n\n\n//   async componentDidMount() {\n//     this.setState({\n//       isLoaded: false\n//     });\n\n//     await this.getDashboardData(this.state.flag, this.state.showArchive)\n//     this.props.context.actions.getAllProjectsSummary();\n//     if (this.props.context.state && this.props.context.state.projectData && this.props.context.state.projectData.length === 0) {\n//       this.props.context.actions.getUserProject();\n//     }\n//   }\n\n//   async getDashboardData(flag, showArchive, e) {\n//     if (e) {\n//       e.preventDefault();\n//     }\n//     let project = this.state.projectData.filter(p => {\n//       return p.title === this.state.hiddenProjectId;\n//     });\n\n//     let projectId = project.length > 0 ? project[0]._id : \"\";\n//     let data = await taskService.getAllTasksForProject(flag, showArchive, projectId);\n//     this.setState({\n//       data: data\n//     })\n//     await this.setState({\n//       chartData: data.chartData,\n//       userProductivityData: data.userProductivityData,\n//       overDueData: data.overDueData,\n//       todayData: data.todayData,\n//       totalProjects: data.totalProjects,\n//       projectStatus: data.projectStatus,\n//       totalProjectUsers: data.totalProjectUsers,\n//     });\n//   }\n\n\n//   render() {\n//     return (\n//       <div className=\"container\">\n//         <div className=\"row\">\n//           <div className=\"col-md-12 \">\n//             <form>\n//               <div className=\"row\">\n//                 <div className=\"col-md-2 \">\n//                   <label>Select Project</label>\n//                   <select className=\"form-control\" name=\"hiddenProjectId\" value={this.state.hiddenProjectId} onChange={this.handleInputChange}>\n//                     <option value=\"\"></option>\n//                     {\n//                       this.state.projectData.map((item, index) => {\n//                         return (\n//                           <option key={index} value={item.title}>{item.title}</option>\n//                         )\n//                       })\n//                     }\n//                   </select>\n//                 </div>\n//                 <div className=\"col-md-2 \">\n//                   <label>Filter Task</label>\n//                   <select className=\"form-control\" name=\"flag\" value={this.state.flag} onChange={this.handleInputChange}>\n//                     <option value=\"duetoday\">Due Today</option>\n//                     <option value=\"overdue\">Over Due</option>\n//                     <option value=\"future\">Future Task</option>\n//                     <option value=\"all\">All Task</option>\n//                   </select>\n//                 </div>\n//                 <div className=\"col-md-2 \">\n//                   <label>Show Archive</label>\n//                   <select className=\"form-control\" name=\"showArchive\" value={this.state.showArchive} onChange={this.handleInputChange}>\n//                     <option value=\"false\">False</option>\n//                     <option value=\"true\">True</option>\n//                   </select>\n//                 </div>\n//                 <div className=\"col-md-2\" style={{ paddingTop: '25px' }}>\n//                   <button type=\"button\" className=\"btn btn-primary\" onClick={this.submit}>Search</button>\n//                   <button type=\"button\" className=\"btn btn-danger\" onClick={this.reset}>Reset</button>\n//                 </div>\n//               </div>\n//             </form>\n//           </div>\n//         </div>\n//         <div className=\"row\" style={{ marginTop: '20px' }}>\n//           <div className=\"col-md-4\">\n//             <div className=\"card mb-4\">\n//               <div className=\"card-header\" style={{ textAlign: 'center' }}>\n//                 <h6 style={{ color: '#5feae4' }}>Total Task Due Today</h6>\n//               </div>\n//               <div className=\"card-body\">\n//                 <h4 style={{ textAlign: 'center' }}>{this.state.todayData}</h4>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"col-md-4\">\n//             <div className=\"card mb-4\">\n//               <div className=\"card-header\" style={{ textAlign: 'center' }}>\n//                 <h6 style={{ color: '#5feae4' }}>Total Projects</h6>\n//               </div>\n//               <div className=\"card-body\">\n//                 <h4 style={{ textAlign: 'center' }}>{this.state.totalProjects}</h4>\n//               </div>\n//             </div>\n//           </div>\n//           <div className=\"col-md-4\">\n//             <div className=\"card mb-4\">\n//               <div className=\"card-header\" style={{ textAlign: 'center' }}>\n//                 <h6 style={{ color: '#5feae4' }}>Total Users</h6>\n//               </div>\n//               <div className=\"card-body\">\n//                 <h4 style={{ textAlign: 'center' }}>{this.state.totalProjectUsers}</h4>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"row\" style={{ marginTop: '20px' }}>\n//           <div className=\"col-md-12\">\n//             <div className=\"card mb-4\">\n//               <div className=\"card-header\" style={{ textAlign: 'center' }}>\n//                 <h6 style={{ color: '#5feae4' }}>Task Summary</h6>\n//               </div>\n//               <div className=\"card-body\">\n//                 <ResponsiveContainer width=\"100%\" height={300}>\n//                   <PieChart>\n//                     <Pie\n//                       data={this.state.chartData}\n//                       cx=\"50%\"\n//                       cy=\"50%\"\n//                       labelLine={false}\n//                       label={renderCustomizedLabel}\n//                       outerRadius={80}\n//                       fill=\"#8884d8\"\n//                       dataKey=\"value\"\n//                     >\n//                       {this.state.chartData.map((entry, index) => (\n//                         <Cell key={`cell-${index}`} fill={this.state.colors[entry.name]} />\n//                       ))}\n//                     </Pie>\n//                     <Tooltip />\n//                     <Legend layout=\"vertical\" verticalAlign=\"middle\" align=\"right\" />\n//                   </PieChart>\n//                 </ResponsiveContainer>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//         <div className=\"row\" style={{ marginTop: '20px' }}>\n//           <div className=\"col-md-12\">\n//             <div className=\"card mb-4\">\n//               <div className=\"card-header\" style={{ textAlign: 'center' }}>\n//                 <h6 style={{ color: '#5feae4' }}>Task List</h6>\n//               </div>\n//               <div className=\"card-body\">\n//                 <DataTable\n//                   data={this.state.data}\n//                   headers={this.state.headers}\n//                   highlightRow={this.state.hightlightRow}\n//                 />\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/models/task/task-model.ts\"\n);\nimport.meta.hot.lastModified = \"1709470693609.7705\";\n}\n// REMIX HMR END\n\nimport mongoose, { Document, Schema } from 'mongoose';\n\ninterface IMessage {\n  content: string;\n}\n\ninterface IUploadFile {\n  fileUrl: string;\n}\n\ninterface ISubTask {\n  title: string;\n  completed: boolean;\n}\n\ninterface ITask extends Document {\n  userId: string;\n  title: string;\n  description: string;\n  completed: boolean;\n  category: string;\n  tag: string;\n  status: string;\n  storyPoint: number;\n  startDate: Date;\n  endDate: Date;\n  depId: string;\n  taskType: string;\n  priority: string;\n  createdOn: string;\n  modifiedOn: string;\n  createdBy: string;\n  modifiedBy: string;\n  isDeleted: boolean;\n  sequence: string;\n  messages: IMessage[];\n  uploadFiles: IUploadFile[];\n  subtasks: ISubTask[];\n  dateOfCompletion: string;\n  subtaskId: string;\n}\n\nconst MessageSchema = new Schema<IMessage>({\n  content: String,\n});\n\nconst UploadFileSchema = new Schema<IUploadFile>({\n  fileUrl: String,\n});\n\nconst SubTaskSchema = new Schema<ISubTask>({\n  title: String,\n  completed: Boolean,\n});\n\nconst TaskSchema = new Schema<ITask>({\n  userId: String,\n  title: String,\n  description: String,\n  completed: Boolean,\n  category: String,\n  tag: String,\n  status: String,\n  storyPoint: Number,\n  startDate: Date,\n  endDate: Date,\n  depId: String,\n  taskType: String,\n  priority: String,\n  createdOn: String,\n  modifiedOn: String,\n  createdBy: String,\n  modifiedBy: String,\n  isDeleted: Boolean,\n  sequence: String,\n  messages: [MessageSchema],\n  uploadFiles: [UploadFileSchema],\n  subtasks: [SubTaskSchema],\n  dateOfCompletion: String,\n  subtaskId: String,\n}, { versionKey: false });\n\nconst Task = mongoose.model<ITask>('task', TaskSchema);\n\nexport default Task;\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/Services/task/task-service.jsx\"\n);\nimport.meta.hot.lastModified = \"1709883510300.0022\";\n}\n// REMIX HMR END\n\nimport {serviceHost } from '../../common/const';\nimport ServiceRequest from  '../../utils/service-request';\n\nimport Task from '../../models/task/task-model';\nimport TaskType from '../../models/task/task-type-model';\nimport TaskPriority from '../../models/task/task-priority-model';\n\nexport const editTask = async (taskData) => {\n    try {\n        const updatedTask = await Task.findByIdAndUpdate(taskData.id, taskData, { new: true });\n        return { tasks: updatedTask, taskErr: null };\n    } catch (err) {\n        console.error('Error editing task:', err);\n        return { tasks: null, taskErr: err };\n    }\n};\n\nexport const addTask = async (taskData) => {\n    try {\n        const newTask = await Task.create(taskData);\n        return { tasks: newTask, taskErr: null };\n    } catch (err) {\n        console.error('Error adding task:', err);\n        return { tasks: null, taskErr: err };\n    }\n};\n\nexport const getAllTasks = async () => {\n    try {\n        const tasks = await Task.find({});\n        return { tasks, taskErr: null };\n    } catch (err) {\n        console.error('Error getting all tasks:', err);\n        return { tasks: null, taskErr: err };\n    }\n};\n\nexport const toggleEditTask = async (taskData, projectId) => {\n    try {\n        // Assuming taskData contains the task object to be updated\n        const updatedTask = await Task.findByIdAndUpdate(taskData.id, taskData, { new: true });\n        return { tasks: updatedTask, taskErr: null };\n    } catch (err) {\n        console.error('Error toggling edit task:', err);\n        return { tasks: null, taskErr: err };\n    }\n};\n\nexport const updateTasksSequence = async (taskList, projectId) => {\n    try {\n        const tasks = await Task.updateMany({ _id: { $in: taskList } }, { projectId });\n        return { tasks, taskErr: null };\n    } catch (err) {\n        console.error('Error updating tasks sequence:', err);\n        return { tasks: null, taskErr: err };\n    }\n}\n\nexport const getAllTaskTypes = async () => {\n    try {\n        const taskTypes = await TaskType.find();\n        return { taskTypes, taskErr: null };\n    } catch (err) {\n        console.error('Error getting all task types:', err);\n        return { taskTypes: null, taskErr: err };\n    }\n}\n\n\nexport const getProjectTasks = async (projectId) => {\n    try {\n        const tasks = await Task.find({ projectId });\n        return { tasks, taskErr: null };\n    } catch (err) {\n        console.error('Error getting project tasks:', err);\n        return { tasks: null, taskErr: err };\n    }\n}\n\nexport const getTaskPriorities = async () => {\n    try {\n        const taskPriorities = await TaskPriority.find();\n        return { taskPriorities, taskErr: null };\n    } catch (err) {\n        console.error('Error getting task priorities:', err);\n        return { taskPriorities: null, taskErr: err };\n    }\n}\n\n\nexport const getDashboardData = async (projectId, flag, showArchive) => {\n    try {\n        const tasks = await Task.find({ projectId, flag, showArchive });\n        return { tasks, tasksErr: null };\n    } catch (err) {\n        console.error('Error getting dashboard data:', err);\n        return { tasks: null, tasksErr: err };\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import Task from \"../../models/task/task-model\";\n// import TaskType from \"../../models/task/task-type-model\";\n// import TaskPriority from \"../../models/task/task-priority-model\";\n\n// // export async function getUsersTodaysOpenTasks(\n// //   userRole,\n// //   userId,\n// //   projectId,\n// //   flag,\n// //   showArchive\n// // ) {\n// //   console.log(\"getUsersTodaysOpenTasks\"); // Changed from logInfo to console.log\n// //   if (!userRole) {\n// //     throw new Error(\"User role is required\");\n// //   }\n\n// //   const currentDate = new Date();\n// //   const currentDateISOString = currentDate.toISOString().split('T')[0]; // Extracting YYYY-MM-DD\n\n// //   let taskCondition = {\n// //     \"isDeleted\": false, // Changed from \"tasks.isDeleted\" to \"isDeleted\"\n// //   };\n\n// //   if (flag === \"duetoday\") {\n// //     taskCondition[\"status\"] = { $ne: \"onHold\" }; // Changed from \"tasks.status\" to \"status\"\n// //     taskCondition[\"startDate\"] = currentDateISOString; // Changed from \"tasks.startDate\" to \"startDate\"\n// //   } else if (flag === \"overdue\") {\n// //     taskCondition[\"status\"] = { $ne: \"completed\" }; // Changed from \"tasks.status\" to \"status\"\n// //     taskCondition[\"endDate\"] = { $lt: currentDateISOString }; // Changed from \"tasks.endDate\" to \"endDate\"\n// //   } else if (flag === \"futureTask\") {\n// //     taskCondition[\"status\"] = { $ne: \"completed\" }; // Changed from \"tasks.status\" to \"status\"\n// //     taskCondition[\"startDate\"] = { $exists: false }; // Changed from \"tasks.startDate\" to \"startDate\"\n// //     taskCondition[\"endDate\"] = { $exists: false }; // Changed from \"tasks.endDate\" to \"endDate\"\n// //     taskCondition[\"status\"] = { $ne: \"onHold\" }; // Changed from \"tasks.status\" to \"status\"\n// //   } else if (flag === \"newTask\" || flag === \"inprogress\" || flag === \"onhold\" || flag === \"cancelled\") {\n// //     taskCondition[\"status\"] = flag; // Changed from \"tasks.status\" to \"status\"\n// //   }\n\n// //   if (showArchive === false) {\n// //     taskCondition[\"archive\"] = false;\n// //   }\n\n// //   let userCondition = {\n// //     isDeleted: false,\n// //   };\n\n// //   if (projectId !== \"undefined\" && projectId !== null && projectId !== \"\") {\n// //     if (userRole === \"admin\") {\n// //       userCondition[\"_id\"] = ObjectId(projectId);\n// //     } else if (userRole === \"owner\") {\n// //       userCondition[\"_id\"] = ObjectId(projectId);\n// //       userCondition[\"$or\"] = [\n// //         { \"projectUsers.userId\": userId },\n// //         { \"projectUsers.userId\": { $exists: false } },\n// //       ];\n// //     }\n// //   } else {\n// //     if (userRole === \"owner\") {\n// //       userCondition[\"$or\"] = [\n// //         { \"projectUsers.userId\": userId },\n// //         { \"projectUsers.userId\": { $exists: false } },\n// //       ];\n// //     } else if (userRole === \"user\") {\n// //       userCondition[\"projectUsers.userId\"] = userId;\n// //     }\n// //   }\n\n// //   let aggregatePipeline = [\n// //     { $match: userCondition },\n// //     {\n// //       $project: {\n// //         _id: 1,\n// //         title: 1,\n// //         \"tasks._id\": 1,\n// //         \"tasks.title\": 1,\n// //         \"tasks.description\": 1,\n// //         \"tasks.status\": 1,\n// //         \"tasks.startDate\": 1,\n// //         \"tasks.endDate\": 1,\n// //         \"tasks.userId\": 1,\n// //         \"tasks.completed\": 1,\n// //         projectUsers: 1,\n// //       },\n// //     },\n// //     { $unwind: \"$tasks\" },\n// //     { $match: taskCondition },\n// //   ];\n\n// //   console.log(aggregatePipeline, \"getUsersTodaysOpenTasks filter condition\"); // Changed from logInfo to console.log\n  \n// //   const result = await Project.aggregate(aggregatePipeline);\n\n// //   return result.map((project) => {\n// //     const task = project.tasks;\n// //     const assignedUser = project.projectUsers.find((user) => user.userId === task.userId.toString());\n// //     const userName = assignedUser ? assignedUser.name : \"\";\n    \n// //     return {\n// //       projectId: project._id,\n// //       projectTitle: project.title,\n// //       _id: task._id,\n// //       title: task.title,\n// //       description: task.description,\n// //       status: task.status,\n// //       startDate: task.startDate,\n// //       endDate: task.endDate,\n// //       userId: task.userId,\n// //       completed: task.completed,\n// //       userName: userName,\n// //     };\n// //   });\n// // }\n\n// // export async function getTodaysTasksChartData(userId, isAdmin, userTeamId) {\n// //   let projCondition = {\n// //     isDeleted: false,\n// //   };\n\n// //   let projectFields = {\n// //     $project: {\n// //       _id: 1,\n// //       title: 1,\n// //       tasks: 1,\n// //     },\n// //   };\n\n// //   let taskCondition = {};\n// //   if (!isAdmin) {\n// //     if (userTeamId) {\n// //       taskCondition.$and = [\n// //         { \"tasks.teamId\": userTeamId },\n// //         { \"tasks.isDeleted\": false },\n// //       ];\n// //     } else {\n// //       taskCondition = {\n// //         \"tasks.userId\": userId,\n// //         \"tasks.isDeleted\": false,\n// //       };\n// //     }\n// //   }\n\n// //   let projectCond = {\n// //     $match: projCondition,\n// //   };\n// //   let tasksUnwind = {\n// //     $unwind: \"$tasks\",\n// //   };\n// //   let taskFilterCondition = {\n// //     $match: taskCondition,\n// //   };\n\n// //   let result = await Project.aggregate([\n// //     projectCond,\n// //     projectFields,\n// //     tasksUnwind,\n// //     taskFilterCondition,\n// //   ]);\n\n// //   let tasks = result.map((p) => {\n// //     let t = {};\n// //     t.projectId = p._id;\n// //     t.projectTitle = p.title;\n// //     t.title = p.tasks.title;\n// //     t.status = p.tasks.status;\n// //     t.userId = p.tasks.userId;\n// //     t.startDate = p.tasks.startDate;\n// //     t.endDate = p.tasks.endDate;\n// //     t.dateOfCompletion = p.tasks.dateOfCompletion;\n// //     t.isDeleted = p.tasks.isDeleted;\n// //     return t;\n// //   });\n\n// //   let countArray = [];\n\n// //   if (tasks.length > 0) {\n// //     let tasksByStatus = {};\n// //     tasks.forEach((task) => {\n// //       if (!tasksByStatus[task.status]) {\n// //         tasksByStatus[task.status] = [];\n// //       }\n// //       tasksByStatus[task.status].push(task);\n// //     });\n  \n// //     for (const [status, tasks] of Object.entries(tasksByStatus)) {\n// //       let count = tasks.length;\n// //       if (status === \"inprogress\" || status === \"new\") {\n// //         let overDueCount = tasks.filter((t) => {\n// //           let dbDate = dateUtil.DateToString(t.endDate);\n// //           return (\n// //             (t.endDate !== undefined && t.endDate !== null && t.endDate !== \"\" && dbDate < date) ||\n// //             (t.endDate === undefined || t.endDate === null || t.endDate === \"\") &&\n// //             (t.startDate === undefined || t.startDate === null || t.startDate === \"\")\n// //           );\n// //         }).length;\n// //         countArray.push({ name: status === \"inprogress\" ? \"Running\" : \"New\", value: count });\n// //         if (overDueCount > 0) {\n// //           countArray.push({ name: \"Overdue\", value: overDueCount });\n// //         }\n// //       } else {\n// //         countArray.push({ name: status === \"completed\" ? \"Completed\" : status, value: count });\n// //       }\n// //     }\n// //   }\n  \n\n// //   return countArray;\n// // }\n\n// // export async function getUserProductivityData(\n// //   userRole,\n// //   userId,\n// //   projectId,\n// //   showArchive\n// // ) {\n// //   console.log(\"getUserProductivityData userInfo=\"); // Changed from logInfo to console.log\n// //   let condition = {};\n\n// //   let projectFields = {\n// //     $project: {\n// //       _id: 1,\n// //       // \"tasks.title\": 1,\n// //       \"tasks._id\": 1,\n// //       \"tasks.userId\": 1,\n// //       \"tasks.startDate\": 1,\n// //       \"tasks.isDeleted\": 1,\n// //       \"tasks.storyPoint\": 1,\n// //       \"tasks.dateOfCompletion\": 1,\n// //     },\n// //   };\n// //   let unwindTasks = {\n// //     $unwind: \"$tasks\",\n// //   };\n// //   if (userId !== undefined && userId !== null && userId !== \"\") {\n// //     condition = {\n// //       $and: [\n// //         {\n// //           \"tasks.dateOfCompletion\": {\n// //             $ne: undefined,\n// //           },\n// //         },\n// //         {\n// //           \"tasks.dateOfCompletion\": {\n// //             $ne: null,\n// //           },\n// //         },\n// //         {\n// //           \"tasks.dateOfCompletion\": {\n// //             $ne: \"\",\n// //           },\n// //         },\n// //       ],\n// //       $and: [\n// //         {\n// //           \"tasks.startDate\": {\n// //             $ne: undefined,\n// //           },\n// //         },\n// //         {\n// //           \"tasks.startDate\": {\n// //             $ne: null,\n// //           },\n// //         },\n// //         {\n// //           \"tasks.startDate\": {\n// //             $ne: \"\",\n// //           },\n// //         },\n// //       ],\n// //       \"tasks.userId\": userId,\n// //       \"tasks.isDeleted\": false,\n// //     };\n// //   }\n\n// //   let taskFilterCondition = {\n// //     $match: condition,\n// //   };\n// //   let projectCond = {};\n// //   projectCond = {\n// //     $match: {\n// //       isDeleted: false,\n// //     },\n// //   };\n\n// //   console.log(\n// //     [projectCond, projectFields, unwindTasks, taskFilterCondition],\n// //     \"getUserProductivity Data filtercondition=\"\n// //   ); // Changed from logInfo to console.log\n// //   var result = await Project.aggregate([\n// //     projectCond,\n// //     projectFields,\n// //     unwindTasks,\n// //     taskFilterCondition,\n// //   ]);\n// //   let storyPoint;\n// //   let tasksByuserId = {};\n// //   let yesterDayDate = dateUtil.DateToString(\n// //     new Date(new Date() - 24 * 60 * 60 * 1000)\n// //   );\n// //   let lastMonthDate = dateUtil.DateToString(\n// //     new Date(new Date(yesterDayDate) - 1000 * 60 * 60 * 24 * 30)\n// //   );\n\n// //   var result1 = await Holiday.find({\n// //     $and: [\n// //       {\n// //         fullDate: { $lte: yesterDayDate },\n// //       },\n// //       {\n// //         fullDate: { $gte: lastMonthDate },\n// //       },\n// //     ],\n// //     isActive: \"1\",\n// //   });\n// //   // .then((result1) => {\n// //   let holidayCount = result1 && result1.length;\n// //   let totalSunday = totalSundays.getSundayInaMonth(\n// //     lastMonthDate,\n// //     yesterDayDate\n// //   );\n// //   let totalHoliday = holidayCount + totalSunday;\n// //   let oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n// //   let daysInMonth = Math.round(\n// //     Math.abs(\n// //       (new Date(yesterDayDate).getTime() - new Date(lastMonthDate).getTime()) /\n// //         oneDay\n// //     )\n// //   );\n\n// //   let workingHours = (daysInMonth - totalHoliday) * config.minWorkingHours;\n\n// //   if (result.length > 0) {\n// //     for (let i = 0; i < result.length; i++) {\n// //       let startDate = dateUtil.DateToString(result[i].tasks.startDate);\n// //       if (startDate >= lastMonthDate || startDate <= yesterDayDate) {\n// //         if (tasksByuserId[result[i].tasks.userId]) {\n// //           storyPoint =\n// //             tasksByuserId[result[i].tasks.userId].storyPoint +\n// //             result[i].tasks.storyPoint;\n// //           tasksByuserId[result[i].tasks.userId].storyPoint = storyPoint;\n// //         } else {\n// //           storyPoint = 0;\n// //           storyPoint = storyPoint + result[i].tasks.storyPoint;\n// //           tasksByuserId[result[i].tasks.userId] = {\n// //             storyPoint: storyPoint,\n// //             workingHours: workingHours,\n// //           };\n// //         }\n// //       }\n// //     }\n// //   }\n// //   let tasks = [];\n// //   let keys = Object.keys(tasksByuserId);\n\n// //   for (let i = 0; i < keys.length; i++) {\n// //     let taskObj = {\n// //       Storypoint: tasksByuserId[keys[i]].storyPoint,\n// //       WorkingHours: tasksByuserId[keys[i]].workingHours,\n// //     };\n// //     tasks.push(taskObj);\n// //   }\n// //   console.log(\"before response getUserProductivity Data  tasks=\"); // Changed from logInfo to console.log\n// //   return tasks;\n\n// //   // })\n// // }\n\n// export default async function getDashboardData(req) {\n//   try {\n//     const { projectId, flag, showArchive } = req.params;\n//     const userRole = req.locals.userInfo.userRole.toLowerCase();\n//     const userId = req.locals.userInfo.userId;\n\n//     const UsersTodaysTasks = await getUsersTodaysOpenTasks(userRole, userId, projectId, flag, showArchive);\n//     const todaysTasksChartData = await getTodaysTasksChartData(userId, userRole === \"admin\", userId); // Assuming userTeamId can be used as userId\n//     const userProductivityData = await getUserProductivityData(userRole, userId, projectId, showArchive);\n\n//     const dashboardData = {\n//       todaysTasksChartData,\n//       userProductivityData,\n//       UsersTodaysTasks,\n//     };\n\n//     return json({\n//       success: true,\n//       data: dashboardData,\n//     });\n//   } catch (error) {\n//     console.error(\"Error fetching dashboard data:\", error);\n//     return json(\n//       {\n//         success: false,\n//         error: \"Failed to fetch dashboard data\",\n//       },\n//       500\n//     );\n//   }\n// }\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/routes/dashboard/route.jsx\"\n);\nimport.meta.hot.lastModified = \"1709882880141.1003\";\n}\n// REMIX HMR END\n\nimport Summary from \"../../Components/summary/summary\";\nimport { json } from \"@remix-run/node\";\n// import { getUsersTodaysOpenTasks, gettodaysTasksChartData, getUserProductivityData } from \"../../Services/task/task-service\";\n\n\nexport async function loader({ request }) {\n    try {\n      // Extract parameters from the request if needed\n      const { projectId, flag, showArchive } = request.params;\n  \n      // Assuming you have some user information available in the request\n      const userRole = request.locals.userInfo.userRole.toLowerCase();\n      const userId = request.locals.userInfo.userId;\n  \n      // Show loader here if needed\n  \n      const UsersTodaysTasks = await getUsersTodaysOpenTasks(userRole, userId, projectId, flag, showArchive);\n      const todaysTasksChartData = await gettodaysTasksChartData(userRole, userId, projectId);\n      const userProductivityData = await getUserProductivityData(userRole, userId, projectId);\n  \n      // Hide loader here if needed\n  \n      const dashboardData = {\n        todaysTasksChartData,\n        userProductivityData,\n        UsersTodaysTasks,\n      };\n  \n      return json({\n        success: true,\n        data: dashboardData,\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard data:\", error);\n      throw error;\n    }\n  }\nexport default function summaryRoute(){\n    return(\n        <div>\n            <Summary/>\n        </div>\n    )\n}"],
  "mappings": "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",
  "names": ["mongoose", "React", "import_jsx_dev_runtime"]
}
