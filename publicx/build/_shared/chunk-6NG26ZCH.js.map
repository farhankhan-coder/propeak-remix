{
  "version": 3,
  "sources": ["../../../app/models/project/project-model.ts", "../../../app/models/user/user-group-model.ts", "../../../app/models/group-members/group-members-model.ts", "../../../app/models/user/notify-user-model.ts", "../../../app/models/project/project-user-model.ts", "../../../app/models/upload-file/upload-file-model.ts", "../../../app/models/project/favorite-project-model.ts", "../../../app/check-entitlements.jsx", "../../../app/Services/project/project-service.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/models/project/project-model.ts\"\n);\nimport.meta.hot.lastModified = \"1709470693605.7717\";\n}\n// REMIX HMR END\n\nimport mongoose, { Document, Schema } from \"mongoose\";\nimport { UserGroupSchema } from \"../user/user-group-model\";\nimport { NotifyUserSchema } from \"../user/notify-user-model\";\nimport { ProjectUserSchema } from \"./project-user-model\";\nimport { UploadFileSchema } from \"../upload-file/upload-file-model\";\nimport { Task } from \"../task/task-model\";\n\ninterface IProject extends Document {\n  title: string;\n  description: string;\n  startdate: string;\n  enddate: string;\n  status: string;\n  category: string;\n  userid: string;\n  createdBy: string;\n  createdOn: string;\n  modifiedBy: string;\n  modifiedOn: string;\n  sendnotification: string;\n  companyId: string;\n  userGroups: UserGroupSchema[];\n  group: string;\n  isDeleted: boolean;\n  miscellaneous: boolean;\n  archive: boolean;\n  projectUsers: ProjectUserSchema[];\n  notifyUsers: NotifyUserSchema[];\n  messages: mongoose.Types.ObjectId[]; // Corrected type for messages\n  uploadFiles: UploadFileSchema[];\n  tasks: mongoose.Types.ObjectId[]; // Corrected type for tasks\n}\n\nconst ProjectSchema = new Schema<IProject>({\n  title: { type: String },\n  description: { type: String },\n  startdate: { type: String },\n  enddate: { type: String },\n  status: { type: String },\n  category: { type: String },\n  userid: { type: String },\n  createdBy: { type: String },\n  createdOn: { type: String },\n  modifiedBy: { type: String },\n  modifiedOn: { type: String },\n  sendnotification: { type: String },\n  companyId: { type: String },\n  userGroups: { type: [UserGroupSchema] },\n  group: { type: String },\n  isDeleted: { type: Boolean },\n  miscellaneous: { type: Boolean },\n  archive: { type: Boolean },\n  projectUsers: { type: [ProjectUserSchema] },\n  notifyUsers: { type: [NotifyUserSchema] },\n  messages: [{ type: Schema.Types.ObjectId, ref: 'Message' }], // Referencing Message model\n  uploadFiles: { type: [UploadFileSchema] },\n  tasks: [{ type: Schema.Types.ObjectId, ref: 'Task' }], // Referencing Task model\n}, { versionKey: false });\n\nconst Project = mongoose.model<IProject>('project', ProjectSchema);\n\nexport default Project;\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/models/user/user-group-model.ts\"\n);\nimport.meta.hot.lastModified = \"1709470693613.7693\";\n}\n// REMIX HMR END\n\nimport mongoose, { Document, Types, Model, Schema } from 'mongoose';\nimport { GroupMembersSchema } from '../group-members/group-members-model'; \n\n// Define the database model\ninterface IUserGroup extends Document {\n  groupId: string;\n  groupName: string;\n  groupMembers: Types.Array<typeof GroupMembersSchema>; // Assuming GroupMembersSchema is the correct type\n}\n\nconst UserGroupSchema = new mongoose.Schema<IUserGroup>({\n  groupId: {\n    type: String\n  },\n  groupName: {\n    type: String\n  },\n  groupMembers: [GroupMembersSchema]\n}, { versionKey: false });\n\nconst UserGroups = mongoose.model<IUserGroup>('userGroup', UserGroupSchema);\n\nexport { UserGroups, UserGroupSchema };\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/models/group-members/group-members-model.ts\"\n);\nimport.meta.hot.lastModified = \"1709470693593.7751\";\n}\n// REMIX HMR END\n\nimport mongoose, { Document } from 'mongoose';\n\ninterface IGroupMember extends Document {\n  id: string;\n  name: string;\n}\n\nconst GroupMembersSchema = new mongoose.Schema({\n  id: {\n    type: String,\n  },\n  name: {\n    type: String,\n  },\n}, { versionKey: false });\n\nconst GroupMembers = mongoose.model<IGroupMember>('groupmember', GroupMembersSchema);\n\nexport { GroupMembers, GroupMembersSchema };\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/models/user/notify-user-model.ts\"\n);\nimport.meta.hot.lastModified = \"1709470693613.7693\";\n}\n// REMIX HMR END\n\nimport mongoose, { Document } from 'mongoose';\n\n// Define the database model\ninterface INotifyUser extends Document {\n  name: string;\n  userId: string;\n  emailId: string;\n}\n\nconst NotifyUserSchema = new mongoose.Schema<INotifyUser>({\n  name: {\n    type: String\n  },\n  userId: {\n    type: String\n  },\n  emailId: {\n    type: String\n  }\n}, { versionKey: false });\n\nconst NotifyUsers = mongoose.model<INotifyUser>('notifyUser', NotifyUserSchema);\n\nexport type { INotifyUser }; // Use 'export type' for re-exporting the type\n\nexport { NotifyUsers, NotifyUserSchema };\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/models/project/project-user-model.ts\"\n);\nimport.meta.hot.lastModified = \"1709470693605.7717\";\n}\n// REMIX HMR END\n\nimport mongoose, { Document, Schema } from \"mongoose\";\n\nexport interface IProjectUser extends Document {\n  name: string;\n  userId: string;\n}\n\nconst ProjectUserSchema = new mongoose.Schema<IProjectUser>({\n  name: {\n    type: String,\n  },\n  userId: {\n    type: String,\n  },\n}, { versionKey: false });\n\nconst ProjectUser = mongoose.model<IProjectUser>('ProjectUser', ProjectUserSchema);\n\nexport { ProjectUser, ProjectUserSchema };\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/models/upload-file/upload-file-model.ts\"\n);\nimport.meta.hot.lastModified = \"1709470693609.7705\";\n}\n// REMIX HMR END\n\nimport mongoose, { Document } from 'mongoose';\n\n// Define the database model\ninterface IUploadFile extends Document {\n  isDeleted: boolean;\n  filename: string;\n  createdOn: Date;\n  createdBy: string;\n}\n\nconst UploadFileSchema = new mongoose.Schema<IUploadFile>({\n  isDeleted: {\n    type: Boolean\n  },\n  filename: {\n    type: String\n  },\n  createdOn: {\n    type: Date\n  },\n  createdBy: {\n    type: String\n  }\n}, { versionKey: false });\n\nconst UploadFiles = mongoose.model<IUploadFile>('uploadFile', UploadFileSchema);\n\nexport { UploadFiles as default, UploadFileSchema };\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/models/project/favorite-project-model.ts\"\n);\nimport.meta.hot.lastModified = \"1709470693605.7717\";\n}\n// REMIX HMR END\n\nimport mongoose, { Document } from \"mongoose\";\n\n// Define the database model\ninterface IFavoriteProject extends Document {\n  userId: string;\n  projectId: string;\n}\n\nconst FavoriteProjectSchema = new mongoose.Schema({\n  userId: {\n    type: String,\n  },\n  projectId: {\n    type: String,\n  },\n}, {\n  versionKey: false,\n});\n\nconst FavoriteProject = mongoose.model<IFavoriteProject>('favoriteproject', FavoriteProjectSchema);\n\nexport default FavoriteProject;\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/check-entitlements.jsx\"\n);\nimport.meta.hot.lastModified = \"1709475089536.302\";\n}\n// REMIX HMR END\n\nconst checkEntitlements = (userRole) => {\n  if (!userRole) {\n    return false;\n  } else if (userRole !== \"admin\" && userRole !== \"owner\") {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst checkEntitlementsForUserRole = (userRole) => {\n  if (!userRole) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nexport default {\n  checkEntitlements: checkEntitlements,\n  checkEntitlementsForUserRole: checkEntitlementsForUserRole,\n};\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/Services/project/project-service.jsx\"\n);\nimport.meta.hot.lastModified = \"1709550911712.1267\";\n}\n// REMIX HMR END\n\nimport Project from \"../../models/project/project-model\";\nimport User from \"../../models/user/user-model\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport secret from \"../../config/secret\";\nimport AuditLogs from \"../../models/auditlog/audit-log-model\";\nimport { Jwt } from \"jsonwebtoken\";\nimport { insertAuditLog } from \"../audit-log/audit-log-service\";\nimport ProjectStatus from \"../../models/project/project-status-model\";\nimport { logInfo, logError } from \"../../common/logger\";\n// import { fromPromise } from \"rxjs/observable/fromPromise\";\n// import { forkJoin } from \"rxjs/observable/forkJoin\";\nimport FavoriteProject from \"../../models/project/favorite-project-model\";\nimport access from \"../../check-entitlements\";\n// import sortData from \"../../common/common\";\nconst errors = {\n  PROJECT_DOESNT_EXIST: \"Project does not exist\",\n  ADD_PROJECT_ERROR: \"Error occurred while adding the project\",\n  EDIT_PROJECT_ERROR: \"Error occurred while updating the project\",\n  DELETE_PROJECT_ERROR: \"Error occurred while deleting the project\",\n  SEARCH_PARAM_MISSING: \"Please input required parameters for search\",\n  SERVER_ERROR: \"Opps, something went wrong. Please try again.\",\n  NOT_AUTHORIZED: \"Your are not authorized\",\n};\n\nexport async function getAuditLog(projectId, userInfo) {\n  const userRole = userInfo.userRole.toLowerCase();\n  const accessCheck = access.checkEntitlements(userRole);\n  const userAccess = userInfo.userAccess;\n  const viewAuditLog = validateEntitlements(\n    userAccess,\n    projectId,\n    \"Audit Report\",\n    \"view\",\n    userRole\n  );\n\n  if (accessCheck === false && !viewAuditLog) {\n    throw new Error(errors.NOT_AUTHORIZED);\n  }\n\n  try {\n    const auditLogsPromise = AuditLogs.find({ projectId }).exec();\n    const projectPromise = Project.findOne({ _id: projectId }).exec();\n\n    const [auditLogs, project] = await Promise.all([\n      auditLogsPromise,\n      projectPromise,\n    ]);\n\n    const projectName = project ? project.title : \"\";\n    return { result: auditLogs, msg: projectName };\n  } catch (error) {\n    console.error(\"Error in getAuditLog:\", error);\n    throw new Error(\"Something went wrong while fetching audit logs.\");\n  }\n}\n\nexport async function getStatusOptions() {\n  try {\n    const projectStatusOptions = await ProjectStatus.find({}).exec();\n    sort(projectStatusOptions, \"displayName\");\n    return projectStatusOptions;\n  } catch (error) {\n    logError(\"Error in getStatusOptions:\", error);\n    throw new Error(\n      \"Something went wrong while fetching project status options.\"\n    );\n  }\n}\n\nexport async function getProjectByProjectId(projectId) {\n  try {\n    const project = await Project.findById(projectId).exec();\n    const messages = project.messages.filter((r) => !r.isDeleted);\n    const uploadFiles = project.uploadFiles.filter((r) => !r.isDeleted);\n    const data = {\n      _id: project._id,\n      title: project.title,\n      description: project.description,\n      startdate: project.startdate,\n      enddate: project.enddate,\n      status: project.status,\n      group: project.group,\n      category: project.category,\n      userid: project.userid,\n      companyId: project.companyId,\n      userGroups: project.userGroups,\n      sendnotification: project.sendnotification,\n      createdBy: project.createdBy,\n      createdOn: project.createdOn,\n      modifiedBy: project.modifiedBy,\n      modifiedOn: project.modifiedOn,\n      isDeleted: project.isDeleted,\n      projectUsers: project.projectUsers,\n      notifyUsers: project.notifyUsers,\n      miscellaneous: project.miscellaneous,\n      archive: project.archive,\n    };\n    logInfo(\"getProjectByProjectId: Returning project data.\");\n    return { data, messages, uploadFiles };\n  } catch (error) {\n    logError(\"Error in getProjectByProjectId:\", error);\n    throw new Error(\"Something went wrong while fetching project data.\");\n  }\n}\n\nexport async function getProjectDataByProjectId(projectId) {\n  try {\n    const project = await Project.findById(projectId).exec();\n    const tasks = project.tasks.filter((r) => !r.isDeleted);\n    const data = {\n      _id: project._id,\n      title: project.title,\n      description: project.description,\n      startdate: project.startdate,\n      enddate: project.enddate,\n      status: project.status,\n      category: project.category,\n      group: project.group,\n      userid: project.userid,\n      companyId: project.companyId,\n      userGroups: project.userGroups,\n      sendnotification: project.sendnotification,\n      createdBy: project.createdBy,\n      createdOn: project.createdOn,\n      modifiedBy: project.modifiedBy,\n      modifiedOn: project.modifiedOn,\n      isDeleted: project.isDeleted,\n      projectUsers: project.projectUsers,\n      notifyUsers: project.notifyUsers,\n      miscellaneous: project.miscellaneous,\n      archive: project.archive,\n    };\n    logInfo(\"getProjectDataByProjectId: Returning project data.\");\n    return { data, tasks };\n  } catch (error) {\n    logError(\"Error in getProjectDataByProjectId:\", error);\n    throw new Error(\"Something went wrong while fetching project data.\");\n  }\n}\n\nexport async function getTasksAndUsers(projectId, userInfo) {\n  try {\n    let userRole = userInfo.userRole.toLowerCase();\n    let accessCheck = access.checkEntitlementsForUserRole(userRole);\n    if (!accessCheck) {\n      throw new Error(errors.NOT_AUTHORIZED);\n    }\n\n    logInfo(\"getTasksAndUsers\");\n    logInfo(projectId, \"req.params.projectId\");\n\n    const result = await Project.findById(projectId);\n\n    logInfo(\"result getTasksAndUsers users\");\n    logInfo(\"result getTasksAndUsers tasks\");\n\n    let tasks = result.tasks.filter((t) => t.isDeleted === false);\n    let projectUsers =\n      result.projectUsers &&\n      result.projectUsers.filter(\n        (u) => u.name !== undefined && u.name !== null && u.name !== \"\"\n      );\n\n    return {\n      users: projectUsers,\n      tasks: tasks,\n      title: result.title,\n    };\n  } catch (error) {\n    logError(\"getTasksAndUsers error\", error);\n    throw error;\n  }\n}\n\nexport async function getAllProjectsSummary(requestBody, userInfo) {\n  try {\n    console.log(\"Request body:\", requestBody);\n\n    let selectedUserId = requestBody.userId;\n    let selectedUserRole = requestBody.userRole;\n    let selectedProjectId = requestBody.projectId;\n    let showArchive = requestBody.showArchive;\n\n    logInfo(\"getAllProjectsSummary\");\n    logInfo(userInfo, \"getAllProjectsSummary userInfo\");\n\n    let userRole = userInfo.userRole.toLowerCase();\n    let userId = userInfo.userId;\n\n    if (!userRole) {\n      throw new Error(errors.NOT_AUTHORIZED);\n    }\n\n    let projects = [];\n    let condition = {};\n    let projectFields = {\n      /* Define your project fields object */\n    };\n    let projectCondition = \"\";\n    let taskFilterCondition = {\n      /* Define your task filter condition object */\n    };\n    let userCondition = {\n      /* Define your user condition object */\n    };\n\n    // Rewrite the logic for project aggregation and filtering\n\n    return {\n      success: true,\n      data: projects,\n      count: userRole === \"user\" ? 1 : totalProjectUser,\n    };\n  } catch (error) {\n    logError(\"getAllProjectsSummary error\", error);\n    throw error;\n  }\n}\n\nexport async function getProjectData() {\n  try {\n    const result = await Project.find(\n      { isDeleted: false, status: \"inprogress\" },\n      { _id: 1, title: 1 }\n    );\n    return result;\n  } catch (error) {\n    logError(\"getProjectData error\", error);\n    throw error;\n  }\n}\n\nexport async function createProject(projectData) {\n  try {\n    const { userInfo, body } = projectData;\n    console.log(\"Incoming request body:\", body);\n\n    const userRole = userInfo.userRole.toLowerCase();\n    const accessCheck = access.checkEntitlements(userRole);\n\n    if (!accessCheck) {\n      console.log(\"User not authorized\");\n      return { success: false, err: errors.NOT_AUTHORIZED };\n    }\n\n    const userId = userInfo.userId;\n    const userName = body.userName;\n\n    const projectUsers = body.newprojects.projectUsers.map((puser) => puser);\n    const notifyUsers = body.newprojects.notifyUsers.map((nuser) => nuser);\n\n    const category = body.newprojects.category;\n    const formattedCategory = Array.isArray(category)\n      ? category.join(\", \")\n      : category;\n\n    const newProject = new Project({\n      ...body.newprojects,\n      category: formattedCategory,\n      projectUsers,\n      notifyUsers,\n    });\n\n    const result = await newProject.create();\n    return { success: true, msg: `Successfully added!`, result };\n  } catch (error) {\n    logError(\"Error occurred in createProject:\", error);\n    return { success: false, err: \"Unexpected error occurred\" };\n  }\n}\n\nexport const addProject = async (\n  title,\n  description,\n  startdate,\n  enddate,\n  status,\n  category,\n  userid,\n  createdBy,\n  createdOn,\n  modifiedBy,\n  modifiedOn,\n  sendnotification,\n  companyId,\n  userGroups,\n  group,\n  isDeleted,\n  miscellaneous,\n  archive,\n  projectUsers,\n  notifyUsers,\n  messages,\n  uploadFiles,\n  tasks,\n  userName\n) => {\n  try {\n    const project = await Project.create({\n      title,\n      description,\n      startdate,\n      enddate,\n      status,\n      category,\n      userid,\n      createdBy,\n      createdOn,\n      modifiedBy,\n      modifiedOn,\n      sendnotification,\n      companyId,\n      userGroups,\n      group,\n      isDeleted,\n      miscellaneous,\n      archive,\n      projectUsers,\n      notifyUsers,\n      messages,\n      uploadFiles,\n      tasks,\n      userName,\n    });\n    return { response: project, err: null };\n  } catch (err) {\n    console.error(\"Error adding project:\", err);\n    return { response: null, err };\n  }\n};\n\nexport async function updateProject(updatedProject, userInfo) {\n  try {\n    let userAccess = userInfo.userAccess;\n    let userRole = userInfo.userRole;\n    let editProject = false;\n    editProject = access.validateEntitlements(\n      userAccess,\n      updatedProject._id,\n      \"Projects\",\n      \"edit\",\n      userRole\n    );\n\n    if (userRole === \"user\" && !editProject) {\n      throw new Error(errors.NOT_AUTHORIZED);\n    }\n\n    const result = await Project.findOneAndUpdate(\n      { _id: updatedProject._id },\n      updatedProject,\n      { new: true }\n    );\n    logInfo(result, \"Updated project\");\n\n    // Perform audit log insertion here\n\n    return { success: true, msg: \"Successfully updated!\" };\n  } catch (error) {\n    logError(errors.EDIT_PROJECT_ERROR, error);\n    throw error;\n  }\n}\n\nexport async function updateProjectField(updatedProject, userInfo) {\n  try {\n    let userRole = userInfo.userRole.toLowerCase();\n    let accessCheck = access.checkEntitlements(userRole);\n    if (!accessCheck) {\n      throw new Error(errors.NOT_AUTHORIZED);\n    }\n\n    const result = await Project.findOneAndUpdate(\n      { _id: updatedProject._id },\n      updatedProject\n    );\n    logInfo(result, \"Updated project field\");\n\n    return { msg: \"Updated Successfully\" };\n  } catch (error) {\n    logError(\"updateProjectField error\", error);\n    throw error;\n  }\n}\n\nexport async function updateProjectCategory(updatedProject, userInfo) {\n  try {\n    let userRole = userInfo.userRole.toLowerCase();\n    let accessCheck = access.checkEntitlements(userRole);\n    if (!accessCheck) {\n      throw new Error(errors.NOT_AUTHORIZED);\n    }\n\n    const result = await Project.findOneAndUpdate(\n      { _id: updatedProject._id },\n      updatedProject\n    );\n    logInfo(\"Updated project category\");\n\n    return { msg: \"Updated Successfully\" };\n  } catch (error) {\n    logError(\"updateProjectCategory error\", error);\n    throw error;\n  }\n}\n\nexport async function deleteProject(projectId, userInfo) {\n  try {\n    const userAccess = userInfo.userAccess;\n    const userRole = userInfo.userRole;\n\n    let deleteProject = access.validateEntitlements(\n      userAccess,\n      projectId,\n      \"Projects\",\n      \"delete\",\n      userRole\n    );\n\n    if (userRole === \"user\" && !deleteProject) {\n      throw new Error(errors.NOT_AUTHORIZED);\n    }\n\n    const result = await Project.findOneAndUpdate(\n      { _id: projectId },\n      { $set: { isDeleted: true } },\n      { new: true }\n    );\n\n    const field = \"isDeleted\";\n    const userIdToken = userInfo.userName;\n    audit.insertAuditLog(\n      \"false\",\n      result.title,\n      \"Project\",\n      field,\n      result[field],\n      userIdToken,\n      result._id\n    );\n\n    await FavoriteProject.remove({ projectId });\n\n    return { msg: \"Project deleted successfully!\" };\n  } catch (error) {\n    logError(\"deleteProject error\", error);\n    throw error;\n  }\n}\n\nexport async function addProjectUsers(projectId, projectUsers) {\n  try {\n    const result = await Project.findOneAndUpdate(\n      { _id: projectId },\n      { $set: { projectUsers } }\n    );\n\n    return { msg: \"Successfully added\" };\n  } catch (error) {\n    logError(\"addProjectUsers error\", error);\n    throw error;\n  }\n}\n\nexport async function getUserProjects() {\n  try {\n    const result = await Project.find(\n      {\n        isDeleted: false,\n        archive: false,\n      },\n      {\n        _id: 1,\n        title: 1,\n        status: 1,\n        projectUsers: 1,\n      }\n    );\n\n    return result;\n  } catch (error) {\n    logError(\"getUserProjects error\", error);\n    throw error;\n  }\n}\n\nexport async function archiveProject(projectId, archive, userInfo) {\n  try {\n    const userAccess = userInfo.userAccess;\n    const userRole = userInfo.userRole;\n\n    let archiveProject = access.validateEntitlements(\n      userAccess,\n      projectId,\n      \"Projects\",\n      \"archive\",\n      userRole\n    );\n\n    if (userRole === \"user\" && !archiveProject) {\n      throw new Error(errors.NOT_AUTHORIZED);\n    }\n\n    const result = await Project.findOneAndUpdate(\n      { _id: projectId },\n      { $set: { archive } },\n      { new: true }\n    );\n\n    const field = \"archive\";\n    const userIdToken = userInfo.userName;\n    audit.insertAuditLog(\n      \"false\",\n      result.title,\n      \"Project\",\n      field,\n      result[field],\n      userIdToken,\n      result._id\n    );\n\n    return result;\n  } catch (error) {\n    logError(\"archiveProject error\", error);\n    throw error;\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_mongoose", "import_mongoose", "mongoose", "mongoose", "import_mongoose", "mongoose", "import_mongoose", "mongoose", "import_mongoose", "mongoose", "mongoose", "import_mongoose", "mongoose", "deleteProject"]
}
