{
  "version": 3,
  "sources": ["../../../app/models/access-right/applevelaccessright-model.ts", "../../../app/Components/Entitlement/services/applevelaccessright-service.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/models/access-right/applevelaccessright-model.ts\"\n);\nimport.meta.hot.lastModified = \"1709470693577.7798\";\n}\n// REMIX HMR END\n\nimport mongoose, { Document, Schema } from 'mongoose';\n\ninterface IAppLevelAccessRight extends Document {\n  userId: string;\n  entitlementId: string;\n  group: string;\n  access: boolean;\n  createdBy: string;\n  createdOn: Date;\n  isDeleted: boolean;\n}\n\nconst AppLevelAccessRightSchema: Schema<IAppLevelAccessRight> = new mongoose.Schema({\n  userId: {\n    type: String,\n  },\n  entitlementId: {\n    type: String,\n  },\n  group: {\n    type: String,\n  },\n  access: {\n    type: Boolean,\n  },\n  createdBy: {\n    type: String,\n  },\n  createdOn: {\n    type: Date,\n    default: Date.now,\n  },\n  isDeleted: {\n    type: Boolean,\n    default: false,\n  },\n}, { versionKey: false });\n\nconst AppLevelAccessRight = mongoose.model<IAppLevelAccessRight>('applevelaccessrights', AppLevelAccessRightSchema);\n\nexport default AppLevelAccessRight;\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/Components/Entitlement/services/applevelaccessright-service.jsx\"\n);\nimport.meta.hot.lastModified = \"1709384153057.1104\";\n}\n// REMIX HMR END\n\nimport { serviceHost } from \"../../../common/const\";\nimport ServiceRequest from \"../../../utils/service-request\";\nimport AppLevelAccessRightEntitlement from \"~/models/access-right/applevelaccessrightentitlment-model\";\nimport User from \"~/models/user/user-model\";\nimport AppLevelAccessRight from \"~/models/access-right/applevelaccessright-model\";\nexport const getAppLevelAccessState = async () => {\n  try {\n    // Perform the query using the Mongoose model\n    const accessRightData = await AppLevelAccessRightEntitlement.find({});\n    console.log(accessRightData, \" app leavel access right from services \");\n    return { accessRightData, err: null };\n  } catch (err) {\n    // Handle errors\n    return { accessRightData: null, err };\n  }\n};\n\nexport const getAll = async () => {\n  try {\n    const users = await User.find({}).select();\n    console.log(users);\n    return users;\n  } catch (error) {\n    console.error(\"Error fetching user emails:\", error);\n    throw error;\n  }\n};\n\nexport async function saveUserAppLevelAccessRight(\n  userId,\n  entitlementId,\n  group,\n  access,\n  createdBy\n) {\n  try {\n    const newUserAppLevelAccessRight = await AppLevelAccessRight.create({\n      userId,\n      entitlementId,\n      group,\n      access,\n      createdBy,\n      createdOn: new Date(),\n      isDeleted: false,\n    });\n\n    return { response: newUserAppLevelAccessRight, err: null };\n  } catch (error) {\n    console.error(\"Error saving UserAppLevelAccessRight:\", error);\n    return { response: null, err: error };\n  }\n}\nexport const getUserAppLevelAccessRights = async () => {\n  try {\n    const accessRights = await AppLevelAccessRight.find({ });\n    return { response: accessRights, err: null };\n  } catch (err) {\n    // Handle errors\n    return { response: null, err };\n  }\n};\n\n// export const getUserAppLevelAccessRights = async (userId) => {\n//   try {\n//     const accessRights = await AppLevelAccessRight.findOne({ userId });\n//     return { response: accessRights, err: null };\n//   } catch (err) {\n//     // Handle errors\n//     return { response: null, err };\n//   }\n// };\n\n// export const getAppLevelAccessState = async () => {\n//   try {\n//     let response = await ServiceRequest(\n//       \"get\",\n//       \"json\",\n//       serviceHost + \"/appLevelAccessRight\",\n//       \"\"\n//     );\n//     return { accessRightData: response.data, err: null };\n//   } catch (err) {\n//     if (err) {\n//       return { accessRightData: null, err };\n//     }\n//   }\n// };\n\n// export const saveUserAppLevelAccessRight = async (userAccessRights) => {\n//   try {\n//     let response = await ServiceRequest(\n//       \"post\",\n//       \"json\",\n//       serviceHost + \"/appLevelAccessRight/save\",\n//       userAccessRights\n//     );\n//     return { response, err: null };\n//   } catch (err) {\n//     if (err) {\n//       return { response: null, err };\n//     }\n//   }\n// };\n\n// export const getUserAppLevelAccessRights = async (userId) => {\n//   try {\n//     let data = { userId: userId };\n\n//     let response = await ServiceRequest(\n//       \"post\",\n//       \"json\",\n//       serviceHost + \"/appLevelAccessRight/get\",\n//       data\n//     );\n\n//     return { response, err: null };\n//   } catch (err) {\n//     if (err) {\n//       return { response: null, err };\n//     }\n//   }\n// };\n"],
  "mappings": ";;;;;;;;;;;AAWA,sBAA2C;AAT3C,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAeA,IAAM,4BAA0D,IAAI,gBAAAA,QAAS,OAAO;AAAA,EAClF,QAAQ;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,EACR;AAAA,EACA,OAAO;AAAA,IACL,MAAM;AAAA,EACR;AAAA,EACA,QAAQ;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA,WAAW;AAAA,IACT,MAAM;AAAA,EACR;AAAA,EACA,WAAW;AAAA,IACT,MAAM;AAAA,IACN,SAAS,KAAK;AAAA,EAChB;AAAA,EACA,WAAW;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,EACX;AACF,GAAG,EAAE,YAAY,MAAM,CAAC;AAExB,IAAM,sBAAsB,gBAAAA,QAAS,MAA4B,wBAAwB,yBAAyB;AAElH,IAAO,oCAAQ;;;ACjDf,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAuDO,IAAM,8BAA8B,YAAY;AACrD,MAAI;AACF,UAAM,eAAe,MAAM,kCAAoB,KAAK,CAAE,CAAC;AACvD,WAAO,EAAE,UAAU,cAAc,KAAK,KAAK;AAAA,EAC7C,SAAS,KAAP;AAEA,WAAO,EAAE,UAAU,MAAM,IAAI;AAAA,EAC/B;AACF;",
  "names": ["mongoose"]
}
