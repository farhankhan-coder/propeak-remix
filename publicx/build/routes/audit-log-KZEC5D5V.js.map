{
  "version": 3,
  "sources": ["../../../app/Components/audit-log/audit-log.jsx", "../../../app/routes/audit-log/route.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/Components/audit-log/audit-log.jsx\"\n);\nimport.meta.hot.lastModified = \"1709384153057.1104\";\n}\n// REMIX HMR END\n\nimport React, { Component } from \"react\";\nimport * as projectservice from \"../../Services/project/project-service\";\nimport DataTable from \"../datatable\";\nimport TaskMenu from \"../tasks/task-menu\";\nimport * as dateUtil from \"../../utils/date-util\";\n\nexport default class AuditLog extends Component {\n  state = {\n    data: [],\n    isLoaded: true,\n    headers: [\n      { title: \"Entity Type\", accessor: \"tableName\", index: 0 },\n      { title: \"Entity Name\", accessor: \"name\", index: 1 },\n      { title: \"Field Name\", accessor: \"fieldName\", index: 2 },\n      { title: \"Old Value\", accessor: \"oldValue\", index: 3 },\n      { title: \"New Value\", accessor: \"newValue\", index: 4 },\n      { title: \"Updated By\", accessor: \"updatedBy\", index: 5 },\n      { title: \"Updated On\", accessor: \"updatedOn\", index: 6 },\n    ],\n    projectId: this.props.projectId,\n    projectName: \"\",\n    message: \"\",\n    excelHeaders: [\n      { label: \"Entity Type\", key: \"tableName\" },\n      { label: \"Entity Name\", key: \"name\" },\n      { label: \"Field Name\", key: \"fieldName\" },\n      { label: \"Old Value\", key: \"oldValue\" },\n      { label: \"New Value\", key: \"newValue\" },\n      { label: \"Updated By\", key: \"updatedBy\" },\n      { label: \"Updated On\", key: \"updatedOn\" },\n    ],\n  };\n\n  formatData(data) {\n    if (data.result && data.result.length > 0) {\n      let dataCopy = [...data.result];\n      var oldValueDate = \"\";\n      var newValueDate = \"\";\n      let format = dataCopy.map((d) => {\n        let updatedDate = dateUtil.DateToLongString(d.updatedOn);\n\n        if (\n          d.fieldName === \"startDate\" ||\n          d.fieldName === \"endDate\" ||\n          d.fieldName === \"dateOfCompletion\"\n        ) {\n          if (d.oldValue === \"\" || d.oldValue === null) {\n            oldValueDate = d.oldValue;\n            newValueDate = dateUtil.DateToLongString(d.newValue);\n          } else {\n            oldValueDate = dateUtil.DateToLongString(d.oldValue);\n            newValueDate = dateUtil.DateToLongString(d.newValue);\n          }\n        } else {\n          oldValueDate = d.oldValue;\n          newValueDate = d.newValue;\n        }\n\n        let objectData = {\n          tableName: d.tableName,\n          name: d.name,\n          fieldName: d.fieldName,\n          oldValue: oldValueDate,\n          newValue: newValueDate,\n          updatedBy: d.updatedBy,\n          updatedOn: updatedDate,\n        };\n\n        return objectData;\n      });\n\n      this.setState({\n        data: format,\n        projectName: data.msg,\n      });\n    }\n  }\n  async componentDidMount() {\n    if (this.props.auditLog) {\n      this.formatData(this.props.auditLog);\n      this.setState({\n        isLoaded: false,\n      });\n    } else {\n      let { response, err } = await projectservice.getProjectAuditLog(\n        this.state.projectId\n      );\n      if (err) {\n        this.setState({\n          message: err,\n          isLoaded: false,\n        });\n      } else if (response && response.data.err) {\n        this.setState({\n          message: response.data.err,\n          isLoaded: false,\n        });\n      } else {\n        this.formatData(response.data);\n        this.setState({\n          isLoaded: false,\n        });\n      }\n    }\n  }\n  \n  // async componentDidMount() {\n  //   let { response, err } = await projectservice.getProjectAuditLog(\n  //     this.state.projectId\n  //   );\n  //   if (err) {\n  //     this.setState({\n  //       message: err,\n  //     });\n  //   } else if (response && response.data.err) {\n  //     this.setState({ message: response.data.err });\n  //   } else {\n  //     this.formatData(response.data);\n  //   }\n  //   this.setState({\n  //     isLoaded: false,\n  //   });\n  // }\n\n  render() {\n    const dataTable = (\n      <DataTable\n        className=\"data-table\"\n        title=\"Audit Report\"\n        keyField=\"_id\"\n        pagination={{\n          enabled: true,\n          pageLength: 50,\n          type: \"long\",\n        }}\n        width=\"100%\"\n        headers={this.state.headers}\n        data={this.state.data ? this.state.data : []}\n        projectName={this.state.projectName}\n        excelHeaders={this.state.excelHeaders}\n        filename={\"auditReport_\" + this.state.projectName + \"_.csv\"}\n        noData=\"No records!\"\n      />\n    );\n    const { auditLog } = this.props;\n    console.log(auditLog, \" data is coming \")\n\n    return (\n      <React.Fragment>\n        {this.state.isLoaded ? (\n          <div className=\"logo\">\n            <img src=\"/images/loading.svg\" alt=\"loading\" />\n          </div>\n        ) : (\n          <React.Fragment>\n            <div className=\"col-sm-12 bg-white\">\n              <h3 className=\"project-title d.inline-block mt-3 mb-3\">\n                {this.state.projectName} - Audit Report{\" \"}\n              </h3>\n\n              <hr />\n              <div className=\"row mt-3 mb-3\">\n                <div className=\"col-sm-12\">\n                  {/* <TaskMenu {...this.props} /> */}\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"col-sm-12\">{dataTable}</div>\n              </div>\n            </div>\n          </React.Fragment>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/audit-log/route.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/audit-log/route.jsx\");\n  import.meta.hot.lastModified = \"1709722272421.2231\";\n}\n// REMIX HMR END\n\nimport AuditLog from \"../../Components/audit-log/audit-log\";\nimport { getAuditLog } from \"../../Services/project/project-service\";\nimport { json, useLoaderData } from \"@remix-run/react\";\nimport Header from \"../header\";\nimport Footer from \"../footer\";\nimport Menu from \"../menu\";\nexport const loader = async ({\n  params\n}) => {\n  const {\n    projectId\n  } = params;\n  try {\n    const {\n      auditLog,\n      err\n    } = await getAuditLog(projectId);\n    console.log(auditLog, \" audit log data \");\n    if (err) {\n      console.error(\"Error getting project audit log:\", err);\n      return json({\n        error: \"Failed to get project audit log.\"\n      }, {\n        status: 500\n      });\n    }\n    return json({\n      auditLog: auditLog\n    });\n  } catch (error) {\n    console.error(\"Error processing request:\", error);\n    return json({\n      error: \"Internal server error.\"\n    }, {\n      status: 500\n    });\n  }\n};\nexport default function AuditLogComponent() {\n  _s();\n  const {\n    auditLog\n  } = useLoaderData();\n  return <div>\n            import Header from \"../header\";\nimport Footer from \"../footer\";\nimport Menu from \"../menu\";\n      <Header />\n      <Menu />\n      {/* <Summary /> */}\n      <Footer />\n      <AuditLog auditLog={auditLog} />\n    </div>;\n}\n_s(AuditLogComponent, \"xk3OJdMkADETOpcQIUP9+QFFWVQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = AuditLogComponent;\nvar _c;\n$RefreshReg$(_c, \"AuditLogComponent\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,mBAAiC;AA8H3B;AAvIN,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AASA,IAAqB,WAArB,cAAsC,uBAAU;AAAA,EAC9C,QAAQ;AAAA,IACN,MAAM,CAAC;AAAA,IACP,UAAU;AAAA,IACV,SAAS;AAAA,MACP,EAAE,OAAO,eAAe,UAAU,aAAa,OAAO,EAAE;AAAA,MACxD,EAAE,OAAO,eAAe,UAAU,QAAQ,OAAO,EAAE;AAAA,MACnD,EAAE,OAAO,cAAc,UAAU,aAAa,OAAO,EAAE;AAAA,MACvD,EAAE,OAAO,aAAa,UAAU,YAAY,OAAO,EAAE;AAAA,MACrD,EAAE,OAAO,aAAa,UAAU,YAAY,OAAO,EAAE;AAAA,MACrD,EAAE,OAAO,cAAc,UAAU,aAAa,OAAO,EAAE;AAAA,MACvD,EAAE,OAAO,cAAc,UAAU,aAAa,OAAO,EAAE;AAAA,IACzD;AAAA,IACA,WAAW,KAAK,MAAM;AAAA,IACtB,aAAa;AAAA,IACb,SAAS;AAAA,IACT,cAAc;AAAA,MACZ,EAAE,OAAO,eAAe,KAAK,YAAY;AAAA,MACzC,EAAE,OAAO,eAAe,KAAK,OAAO;AAAA,MACpC,EAAE,OAAO,cAAc,KAAK,YAAY;AAAA,MACxC,EAAE,OAAO,aAAa,KAAK,WAAW;AAAA,MACtC,EAAE,OAAO,aAAa,KAAK,WAAW;AAAA,MACtC,EAAE,OAAO,cAAc,KAAK,YAAY;AAAA,MACxC,EAAE,OAAO,cAAc,KAAK,YAAY;AAAA,IAC1C;AAAA,EACF;AAAA,EAEA,WAAW,MAAM;AACf,QAAI,KAAK,UAAU,KAAK,OAAO,SAAS,GAAG;AACzC,UAAI,WAAW,CAAC,GAAG,KAAK,MAAM;AAC9B,UAAI,eAAe;AACnB,UAAI,eAAe;AACnB,UAAI,SAAS,SAAS,IAAI,CAAC,MAAM;AAC/B,YAAI,cAAuB,iBAAiB,EAAE,SAAS;AAEvD,YACE,EAAE,cAAc,eAChB,EAAE,cAAc,aAChB,EAAE,cAAc,oBAChB;AACA,cAAI,EAAE,aAAa,MAAM,EAAE,aAAa,MAAM;AAC5C,2BAAe,EAAE;AACjB,2BAAwB,iBAAiB,EAAE,QAAQ;AAAA,UACrD,OAAO;AACL,2BAAwB,iBAAiB,EAAE,QAAQ;AACnD,2BAAwB,iBAAiB,EAAE,QAAQ;AAAA,UACrD;AAAA,QACF,OAAO;AACL,yBAAe,EAAE;AACjB,yBAAe,EAAE;AAAA,QACnB;AAEA,YAAI,aAAa;AAAA,UACf,WAAW,EAAE;AAAA,UACb,MAAM,EAAE;AAAA,UACR,WAAW,EAAE;AAAA,UACb,UAAU;AAAA,UACV,UAAU;AAAA,UACV,WAAW,EAAE;AAAA,UACb,WAAW;AAAA,QACb;AAEA,eAAO;AAAA,MACT,CAAC;AAED,WAAK,SAAS;AAAA,QACZ,MAAM;AAAA,QACN,aAAa,KAAK;AAAA,MACpB,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,MAAM,oBAAoB;AACxB,QAAI,KAAK,MAAM,UAAU;AACvB,WAAK,WAAW,KAAK,MAAM,QAAQ;AACnC,WAAK,SAAS;AAAA,QACZ,UAAU;AAAA,MACZ,CAAC;AAAA,IACH,OAAO;AACL,UAAI,EAAE,UAAU,IAAI,IAAI,MAAqB;AAAA,QAC3C,KAAK,MAAM;AAAA,MACb;AACA,UAAI,KAAK;AACP,aAAK,SAAS;AAAA,UACZ,SAAS;AAAA,UACT,UAAU;AAAA,QACZ,CAAC;AAAA,MACH,WAAW,YAAY,SAAS,KAAK,KAAK;AACxC,aAAK,SAAS;AAAA,UACZ,SAAS,SAAS,KAAK;AAAA,UACvB,UAAU;AAAA,QACZ,CAAC;AAAA,MACH,OAAO;AACL,aAAK,WAAW,SAAS,IAAI;AAC7B,aAAK,SAAS;AAAA,UACZ,UAAU;AAAA,QACZ,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,SAAS;AACP,UAAM,YACJ;AAAA,MAAC;AAAA;AAAA,QACC,WAAU;AAAA,QACV,OAAM;AAAA,QACN,UAAS;AAAA,QACT,YAAY;AAAA,UACV,SAAS;AAAA,UACT,YAAY;AAAA,UACZ,MAAM;AAAA,QACR;AAAA,QACA,OAAM;AAAA,QACN,SAAS,KAAK,MAAM;AAAA,QACpB,MAAM,KAAK,MAAM,OAAO,KAAK,MAAM,OAAO,CAAC;AAAA,QAC3C,aAAa,KAAK,MAAM;AAAA,QACxB,cAAc,KAAK,MAAM;AAAA,QACzB,UAAU,iBAAiB,KAAK,MAAM,cAAc;AAAA,QACpD,QAAO;AAAA;AAAA,MAfT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBA;AAEF,UAAM,EAAE,SAAS,IAAI,KAAK;AAC1B,YAAQ,IAAI,UAAU,kBAAkB;AAExC,WACE,mDAAC,aAAAA,QAAM,UAAN,EACE,eAAK,MAAM,WACV,mDAAC,SAAI,WAAU,QACb,6DAAC,SAAI,KAAI,uBAAsB,KAAI,aAAnC;AAAA;AAAA;AAAA;AAAA,WAA6C,KAD/C;AAAA;AAAA;AAAA;AAAA,WAEA,IAEA,mDAAC,aAAAA,QAAM,UAAN,EACC,6DAAC,SAAI,WAAU,sBACb;AAAA,yDAAC,QAAG,WAAU,0CACX;AAAA,aAAK,MAAM;AAAA,QAAY;AAAA,QAAgB;AAAA,WAD1C;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MAEA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MACJ,mDAAC,SAAI,WAAU,iBACb,6DAAC,SAAI,WAAU,eAAf;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MAEA,mDAAC,SAAI,WAAU,OACb,6DAAC,SAAI,WAAU,aAAa,uBAA5B;AAAA;AAAA;AAAA;AAAA,aAAsC,KADxC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAdF;AAAA;AAAA;AAAA;AAAA,WAeA,KAhBF;AAAA;AAAA;AAAA;AAAA,WAiBA,KAvBJ;AAAA;AAAA;AAAA;AAAA,WAyBA;AAAA,EAEJ;AACF;;;ACvHM,IAAAC,0BAAA;AAnEN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,qCAAuC,EAAE;AAAA,EAClF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAgC;AAChC,cAAY,IAAI,eAAe;AACjC;AAyCe,SAAR,oBAAqC;AAC1C,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,SAAO,oDAAC,SAAI;AAAA;AAAA,IAIR,oDAAC,YAAD;AAAA;AAAA;AAAA;AAAA,WAAQ;AAAA,IACR,oDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,WAAM;AAAA,IAEN,oDAAC,YAAD;AAAA;AAAA;AAAA;AAAA,WAAQ;AAAA,IACR,oDAAC,YAAS,YAAV;AAAA;AAAA;AAAA;AAAA,WAA8B;AAAA,OAR3B;AAAA;AAAA;AAAA;AAAA,SASL;AACJ;AACA,GAAG,mBAAmB,gCAAgC,OAAO,WAAY;AACvE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,mBAAmB;AAEpC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["React", "import_jsx_dev_runtime"]
}
