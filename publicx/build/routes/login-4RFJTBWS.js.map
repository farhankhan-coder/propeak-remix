{
  "version": 3,
  "sources": ["../../../app/Components/login/components/login.jsx", "../../../app/routes/login/route.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/Components/login/components/login.jsx\"\n);\n\n}\n// REMIX HMR END\n\nimport React, { Component } from \"react\";\nimport { Form } from \"@remix-run/react\";\nimport Recaptcha from \"react-recaptcha\";\nimport { Link } from \"@remix-run/react\";\nimport * as userservice from \"../services/login-service\";\nimport Auth from \"../../../utils/auth\";\nimport { ACCESS_TOKEN } from \"../../../common/const\";\nimport config from \"../../../common/config\";\nimport resetPass from \"./reset-password.css\";\nexport const links = () =>\n[{ rel: \"stylesheet\", href: resetPass }];\nclass Login extends Component {\n  state = {\n    login: Auth.get(\"userId\") ? true : false,\n    message: \"\",\n    messageModal: \"\",\n    user: {},\n    showForgotPassword: false,\n    email: \"\",\n    useremail: \"\",\n    domain: \"\",\n    isVerified: false\n  };\n\n  handleInputChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n      message: \"\"\n    });\n  };\n\n  onkeyEnter = (e) => {\n    if (e.which === 13) {\n      this.forgotPasswordRequestOnSubmit();\n    }\n  };\n\n  forgotPasswordRequestOnSubmit = async () => {\n    let { useremail } = this.state;\n    let { response, err } = await userservice.forgotPassword(useremail);\n    if (err) {\n      this.setState({\n        messageModal: err\n      });\n    } else if (response && response.data.err) {\n      this.setState({\n        messageModal: response.data.err\n      });\n    } else {\n      this.setState({\n        messageModal: response.data.msg,\n        useremail: \"\"\n      });\n    }\n  };\n\n  checkKey = (e) => {\n    if (e.which === 13) {\n      this.onLogin();\n    }\n  };\n\n  recaptchaLoaded() {\n\n    // console.log(\"Captcha has loaded\");\n  }\n  verifyCallback = (response) => {\n    if (response) {\n      this.setState({\n        isVerified: true,\n        message: \"\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div\n          className=\"container-fluid justify-content-center align-items-center\"\n          id=\"loginpage\">\n\n          <div className=\"row\">\n            <div className=\"col-sm-5 offset-sm-1 logo-container\">\n              <div className=\"logo-wrapper d-flex flex-column justify-content-center \">\n                <img src=\"/images/proPeakNewLogo.svg\" alt=\"proPeak PMS\" />\n              </div>\n            </div>\n\n            <div className=\"col-sm-5 d-flex flex-column justify-content-center\">\n              <div className=\"loginWrapper justify-content-center align-items-center\">\n                <div className=\"loginBox  justify-content-center align-items-center\">\n                  <h4 className=\"login-title\">LOGIN</h4>\n                  <hr />\n                  {this.state.message ?\n                  <span className=\"login-alert alert-danger\">\n                      {this.state.message}\n                    </span> :\n\n                  \"\"}\n\n\n                  <Form method=\"POST\" action=\"/login\">\n                    <div className=\"form-group \">\n                      <label>Username</label>\n                      <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                          <input\n                            type=\"text\"\n                            className=\" form-control username\"\n                            placeholder=\"email\"\n                            name=\"email\"\n                            onChange={this.handleInputChange}\n                            onKeyPress={this.checkKey} />\n\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"form-group\">\n                      <label>Password</label>\n                      <input\n                        className=\"form-control password text-muted\"\n                        placeholder=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        onChange={this.handleInputChange}\n                        onKeyPress={this.checkKey} />\n\n                    </div>\n                    <div className=\"form-group\">\n                      <Recaptcha\n                        sitekey={config.sitekey}\n                        render=\"explicit\"\n                        onloadCallback={this.recaptchaLoaded}\n                        verifyCallback={this.verifyCallback} />\n\n                    </div>\n                    <div className=\"form-group\">\n                      <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                          <button\n                            type=\"submit\"\n                            className=\"btn btn-primary btn-block\">\n\n                            Login\n                          </button>\n                        </div>\n                        <div className=\"col-sm-12 reset-link\">\n                          <small className=\"text-muted\">\n                            Forgot Password?{\" \"}\n                            <Link\n                              to={\"/resetForgotPassword\"}\n                              className=\"links\"\n                              style={{\n                                lineHeight: \"1.3em\",\n                                color: \"rgb(255, 152, 0)\",\n                                fontSize: \"15px\"\n                              }}>\n\n                              Click here\n                            </Link>\n                          </small>\n                        </div>\n                      </div>\n                    </div>\n                  </Form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>);\n\n  }\n}\n\nexport default Login;\n\n// import React, { Component } from \"react\";\n// import { Form } from \"@remix-run/react\";\n// import Recaptcha from \"react-recaptcha\";\n// import { Link } from \"react-router-dom\";\n// import * as userservice from \"../services/login-service\";\n// import Auth from \"../../../utils/auth\";\n// import { ACCESS_TOKEN } from \"../../../common/const\";\n// import config from \"../../../common/config\";\n// import \"./reset-password.css\";\n\n// class Login extends Component {\n//   state = {\n//     login: Auth.get(\"userId\") ? true : false,\n//     message: \"\",\n//     messageModal: \"\",\n//     user: {},\n//     showForgotPassword: false,\n//     email: \"\",\n//     useremail: \"\",\n//     domain: \"\",\n//     isVerified: false,\n//   };\n\n//   handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     this.setState({\n//       [name]: value,\n//       message: \"\",\n//     });\n//   };\n\n//   onkeyEnter = (e) => {\n//     if (e.which === 13) {\n//       this.forgotPasswordRequestOnSubmit();\n//     }\n//   };\n\n//   forgotPasswordRequestOnSubmit = async () => {\n//     let { useremail } = this.state;\n//     let { response, err } = await userservice.forgotPassword(useremail);\n//     if (err) {\n//       this.setState({\n//         messageModal: err,\n//       });\n//     } else if (response && response.data.err) {\n//       this.setState({\n//         messageModal: response.data.err,\n//       });\n//     } else {\n//       this.setState({\n//         messageModal: response.data.msg,\n//         useremail: \"\",\n//       });\n//     }\n//   };\n\n//   checkKey = (e) => {\n//     if (e.which === 13) {\n//       this.onLogin();\n//     }\n//   };\n\n//   recaptchaLoaded() {\n//     // console.log(\"Captcha has loaded\");\n//   }\n\n//   verifyCallback = (response) => {\n//     if (response) {\n//       this.setState({\n//         isVerified: true,\n//         message: \"\",\n//       });\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <React.Fragment>\n//         <div className=\"container-fluid justify-content-center align-items-center\" id=\"loginpage\">\n//           <div className=\"row\">\n//             <div className=\"col-sm-5 offset-sm-1 logo-container\">\n//               <div className=\"logo-wrapper d-flex flex-column justify-content-center \">\n//                 <img src=\"/images/proPeakNewLogo.svg\" alt=\"proPeak PMS\" />\n//               </div>\n//             </div>\n\n//             <div className=\"col-sm-5 d-flex flex-column justify-content-center\">\n//               <div className=\"loginWrapper justify-content-center align-items-center\">\n//                 <div className=\"loginBox  justify-content-center align-items-center\">\n//                   <h4 className=\"login-title\">LOGIN</h4>\n//                   <hr />\n//                   {this.state.message ? (\n//                     <span className=\"login-alert alert-danger\">{this.state.message}</span>\n//                   ) : (\n//                     \"\"\n//                   )}\n\n//                   <Form method=\"POST\" action=\"/login\" >\n//                     <div className=\"form-group \">\n//                       <label>Username</label>\n//                       <div className=\"row\">\n//                         <div className=\"col-sm-12\">\n//                           <input\n//                             type=\"text\"\n//                             className=\" form-control username\"\n//                             placeholder=\"email\"\n//                             name=\"email\"\n//                             onChange={this.handleInputChange}\n//                             onKeyPress={this.checkKey}\n//                           />\n//                         </div>\n//                       </div>\n//                     </div>\n//                     <div className=\"form-group\">\n//                       <label>Password</label>\n//                       <input\n//                         className=\"form-control password text-muted\"\n//                         placeholder=\"password\"\n//                         name=\"password\"\n//                         type=\"password\"\n//                         onChange={this.handleInputChange}\n//                         onKeyPress={this.checkKey}\n//                       />\n//                     </div>\n//                     <div className=\"form-group\">\n//                       <Recaptcha\n//                         sitekey={config.sitekey}\n//                         render=\"explicit\"\n//                         onloadCallback={this.recaptchaLoaded}\n//                         verifyCallback={this.verifyCallback}\n//                       />\n//                     </div>\n//                     <div className=\"form-group\">\n//                       <div className=\"row\">\n//                         <div className=\"col-sm-12\">\n//                           <button type=\"submit\" className=\"btn btn-primary btn-block\">\n//                             Login\n//                           </button>\n//                         </div>\n//                         <div className=\"col-sm-12 reset-link\">\n//                           <small className=\"text-muted\">\n//                             Forgot Password?{\" \"}\n//                             <Link\n//                               to={\"/resetPassword\"}\n//                               className=\"links\"\n//                               style={{\n//                                 lineHeight: \"1.3em\",\n//                                 color: \"rgb(255, 152, 0)\",\n//                                 fontSize: \"15px\",\n//                               }}\n//                             >\n//                               Click here\n//                             </Link>\n//                           </small>\n//                         </div>\n//                       </div>\n//                     </div>\n//                   </Form>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </React.Fragment>\n//     );\n//   }\n// }\n\n// export default Login;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/login/route.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/login/route.jsx\");\n  import.meta.hot.lastModified = \"1710324001528.0728\";\n}\n// REMIX HMR END\n\nimport Login from \"../../Components/login/components/login\";\n// import { login } from \"../../Components/login/services/login-service\";\nimport { login } from \"../../Services/login/login-service\";\nimport { redirect } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\"; // Import json f responses\n\nexport default function LoginForm() {\n  return <div>\n      <Login />\n    </div>;\n}\n_c = LoginForm;\nexport const action = async ({\n  request\n}) => {\n  try {\n    const form = new URLSearchParams(await request.text());\n    const email = form.get(\"email\");\n    const password = form.get(\"password\");\n    const user = await login(email, password);\n    console.log(user, \"users\");\n    // if (user || user.token || user.refreshToken) {\n    //   console.log(\"Login successful!\");\n    //   console.log(\"Access token:\", user.token);\n    //   console.log(\"Refresh token:\", user.refreshToken);\n    // } else {\n    //   console.log(\"Login failed or tokens were not generated.\");\n    //   return json({ error: \"Login failed\" }, { status: 401 });\n    // }\n    if (!user) {\n      return json({\n        error: \"Invalid email or password\"\n      }, {\n        status: 401\n      });\n    }\n    return redirect(\"/category\");\n  } catch (error) {\n    console.error(\"Error in login action:\", error);\n    return json({\n      error: \"An error occurred during login\"\n    }, {\n      status: 500\n    });\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,mBAAiC;AAEjC,6BAAsB;AAoFN;AA/FhB,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AAEA;AAcA,IAAM,QAAN,cAAoB,uBAAU;AAAA,EAC5B,QAAQ;AAAA,IACN,OAAO,aAAK,IAAI,QAAQ,IAAI,OAAO;AAAA,IACnC,SAAS;AAAA,IACT,cAAc;AAAA,IACd,MAAM,CAAC;AAAA,IACP,oBAAoB;AAAA,IACpB,OAAO;AAAA,IACP,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,YAAY;AAAA,EACd;AAAA,EAEA,oBAAoB,CAAC,MAAM;AACzB,UAAM,EAAE,MAAM,MAAM,IAAI,EAAE;AAC1B,SAAK,SAAS;AAAA,MACZ,CAAC,IAAI,GAAG;AAAA,MACR,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AAAA,EAEA,aAAa,CAAC,MAAM;AAClB,QAAI,EAAE,UAAU,IAAI;AAClB,WAAK,8BAA8B;AAAA,IACrC;AAAA,EACF;AAAA,EAEA,gCAAgC,YAAY;AAC1C,QAAI,EAAE,UAAU,IAAI,KAAK;AACzB,QAAI,EAAE,UAAU,IAAI,IAAI,MAAkB,SAAe,SAAS;AAClE,QAAI,KAAK;AACP,WAAK,SAAS;AAAA,QACZ,cAAc;AAAA,MAChB,CAAC;AAAA,IACH,WAAW,YAAY,SAAS,KAAK,KAAK;AACxC,WAAK,SAAS;AAAA,QACZ,cAAc,SAAS,KAAK;AAAA,MAC9B,CAAC;AAAA,IACH,OAAO;AACL,WAAK,SAAS;AAAA,QACZ,cAAc,SAAS,KAAK;AAAA,QAC5B,WAAW;AAAA,MACb,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,WAAW,CAAC,MAAM;AAChB,QAAI,EAAE,UAAU,IAAI;AAClB,WAAK,QAAQ;AAAA,IACf;AAAA,EACF;AAAA,EAEA,kBAAkB;AAAA,EAGlB;AAAA,EACA,iBAAiB,CAAC,aAAa;AAC7B,QAAI,UAAU;AACZ,WAAK,SAAS;AAAA,QACZ,YAAY;AAAA,QACZ,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,SAAS;AACP,WACE,mDAAC,aAAAA,QAAM,UAAN,EACC;AAAA,MAAC;AAAA;AAAA,QACC,WAAU;AAAA,QACV,IAAG;AAAA,QAEH,6DAAC,SAAI,WAAU,OACb;AAAA,6DAAC,SAAI,WAAU,uCACb,6DAAC,SAAI,WAAU,2DACb,6DAAC,SAAI,KAAI,8BAA6B,KAAI,iBAA1C;AAAA;AAAA;AAAA;AAAA,iBAAwD,KAD1D;AAAA;AAAA;AAAA;AAAA,iBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,iBAIA;AAAA,UAEA,mDAAC,SAAI,WAAU,sDACb,6DAAC,SAAI,WAAU,0DACb,6DAAC,SAAI,WAAU,uDACb;AAAA,+DAAC,QAAG,WAAU,eAAc,qBAA5B;AAAA;AAAA;AAAA;AAAA,mBAAiC;AAAA,YACjC,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,mBAAI;AAAA,YACH,KAAK,MAAM,UACZ,mDAAC,UAAK,WAAU,4BACX,eAAK,MAAM,WADhB;AAAA;AAAA;AAAA;AAAA,mBAEE,IAEF;AAAA,YAGA,mDAAC,QAAK,QAAO,QAAO,QAAO,UACzB;AAAA,iEAAC,SAAI,WAAU,eACb;AAAA,mEAAC,WAAM,wBAAP;AAAA;AAAA;AAAA;AAAA,uBAAe;AAAA,gBACf,mDAAC,SAAI,WAAU,OACb,6DAAC,SAAI,WAAU,aACb;AAAA,kBAAC;AAAA;AAAA,oBACC,MAAK;AAAA,oBACL,WAAU;AAAA,oBACV,aAAY;AAAA,oBACZ,MAAK;AAAA,oBACL,UAAU,KAAK;AAAA,oBACf,YAAY,KAAK;AAAA;AAAA,kBANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAM6B,KAP/B;AAAA;AAAA;AAAA;AAAA,uBASA,KAVF;AAAA;AAAA;AAAA;AAAA,uBAWA;AAAA,mBAbF;AAAA;AAAA;AAAA;AAAA,qBAcA;AAAA,cACA,mDAAC,SAAI,WAAU,cACb;AAAA,mEAAC,WAAM,wBAAP;AAAA;AAAA;AAAA;AAAA,uBAAe;AAAA,gBACf;AAAA,kBAAC;AAAA;AAAA,oBACC,WAAU;AAAA,oBACV,aAAY;AAAA,oBACZ,MAAK;AAAA,oBACL,MAAK;AAAA,oBACL,UAAU,KAAK;AAAA,oBACf,YAAY,KAAK;AAAA;AAAA,kBANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAM6B;AAAA,mBAR/B;AAAA;AAAA;AAAA;AAAA,qBAUA;AAAA,cACA,mDAAC,SAAI,WAAU,cACb;AAAA,gBAAC,uBAAAC;AAAA,gBAAA;AAAA,kBACC,SAAS,eAAO;AAAA,kBAChB,QAAO;AAAA,kBACP,gBAAgB,KAAK;AAAA,kBACrB,gBAAgB,KAAK;AAAA;AAAA,gBAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAIuC,KALzC;AAAA;AAAA;AAAA;AAAA,qBAOA;AAAA,cACA,mDAAC,SAAI,WAAU,cACb,6DAAC,SAAI,WAAU,OACb;AAAA,mEAAC,SAAI,WAAU,aACb;AAAA,kBAAC;AAAA;AAAA,oBACC,MAAK;AAAA,oBACL,WAAU;AAAA,oBAA4B;AAAA;AAAA,kBAFxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAKA,KANF;AAAA;AAAA;AAAA;AAAA,uBAOA;AAAA,gBACA,mDAAC,SAAI,WAAU,wBACb,6DAAC,WAAM,WAAU,cAAa;AAAA;AAAA,kBACX;AAAA,kBACjB;AAAA,oBAAC;AAAA;AAAA,sBACC,IAAI;AAAA,sBACJ,WAAU;AAAA,sBACV,OAAO;AAAA,wBACL,YAAY;AAAA,wBACZ,OAAO;AAAA,wBACP,UAAU;AAAA,sBACZ;AAAA,sBAAG;AAAA;AAAA,oBAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAUA;AAAA,qBAZF;AAAA;AAAA;AAAA;AAAA,uBAaA,KAdF;AAAA;AAAA;AAAA;AAAA,uBAeA;AAAA,mBAxBF;AAAA;AAAA;AAAA;AAAA,qBAyBA,KA1BF;AAAA;AAAA;AAAA;AAAA,qBA2BA;AAAA,iBA9DF;AAAA;AAAA;AAAA;AAAA,mBA+DA;AAAA,eA1EF;AAAA;AAAA;AAAA;AAAA,iBA2EA,KA5EF;AAAA;AAAA;AAAA;AAAA,iBA6EA,KA9EF;AAAA;AAAA;AAAA;AAAA,iBA+EA;AAAA,aAtFF;AAAA;AAAA;AAAA;AAAA,eAuFA;AAAA;AAAA,MA3FF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA4FA,KA7FF;AAAA;AAAA;AAAA;AAAA,WA8FA;AAAA,EAEJ;AACF;AAEA,IAAO,gBAAQ;;;ACpKf,kBAAqB;AAIf,IAAAC,0BAAA;AA3BN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,iCAAmC,EAAE;AAAA,EAC9E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA4B;AAC5B,cAAY,IAAI,eAAe;AACjC;AASe,SAAR,YAA6B;AAClC,SAAO,oDAAC,SACJ,8DAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,SAAO,KADJ;AAAA;AAAA;AAAA;AAAA,SAEL;AACJ;AACA,KAAK;AAmCL,IAAI;AACJ,aAAa,IAAI,WAAW;AAE5B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["React", "Recaptcha", "import_jsx_dev_runtime"]
}
