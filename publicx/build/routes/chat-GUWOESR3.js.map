{
  "version": 3,
  "sources": ["../../../app/Components/chat/chat-form.jsx", "../../../app/routes/chat/route.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/Components/chat/chat-form.jsx\"\n);\nimport.meta.hot.lastModified = \"1709384153069.1104\";\n}\n// REMIX HMR END\n\nimport React, { Component } from \"react\";\nimport * as chatservice from \"../../Services/chat/chat-service\";\nimport { Form } from \"@remix-run/react\";\n\nexport default class ChatForm extends Component {\n  state = {\n    title: \"\",\n    message: \"\",\n  };\n\n  handleChange = (e) => {\n    let name = e.target.name;\n    let value = e.target.value;\n    this.setState({\n      [name]: value,\n      message: \"\",\n    });\n  };\n\n  // addNewDiscussionMessage = async() => {\n  //     // console.log(\"this.props.messageId\",this.props.messageId);\n  //     if(this.state.title === \"\"){\n  //         this.setState({\n  //             message: \"Please enter a message\"\n  //         })\n  //     } else {\n  //         let { response, err } = await chatservice.addDiscussionMessage(this.state.title,this.props.subjectId,this.props.messageId);\n  //         if (err) {\n  //             this.setState({\n  //                 message: 'Error : ' + err,\n  //             });\n  //         } else if (response && response.data.err) {\n  //             this.setState({\n  //                 message: 'Error : ' + response.data.err,\n  //             });\n  //         } else {\n  //             // console.log(\"response.data\",response.data);\n  //             this.setState({\n  //                 title: ''\n  //             });\n  //             if(!this.props.messageId){\n  //                 this.props.addDiscussionMsg(response.data);\n  //             } else {\n  //                 this.props.addReplyMessage(response.data, this.props.messageId);\n  //                 this.props.updateState(false,this.props.messageId );\n  //             }\n\n  //         }\n  //     }\n  // }\n\n  render() {\n    // console.log(\"this.props.subjectTitle\",this.props.subjectTitle);\n    return (\n      <div>\n        <div className=\"row\">\n          <h3>{this.props.subjectTitle}</h3>\n        </div>\n        <div className=\"row\">\n          <Form method=\"POST\" action=\"/chat\">\n            <span style={{ color: \"red\" }}>{this.state.message}</span>\n            <div className=\"col-sm-8\">\n              <div className=\"form-group\">\n                <textarea\n                  className=\"form-control\"\n                  placeholder=\"Enter your message\"\n                  name=\"title\"\n                  value={this.state.title}\n                  onChange={this.handleChange}\n                />\n              </div>\n            </div>\n            <div className=\"col-sm-offset-11\">\n              <button\n                className=\"btn btn-primary btn-block\"\n                onClick={this.addNewDiscussionMessage}\n              >\n                Save\n              </button>\n            </div>\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/chat/route.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/chat/route.jsx\");\n  import.meta.hot.lastModified = \"1709725796738.469\";\n}\n// REMIX HMR END\n\nimport React, { Component } from \"react\";\nimport ChatForm from \"../../Components/chat/chat-form\";\nimport TaskMenu from \"../../Components/tasks/task-menu\";\nimport DiscussionMessage from \"../../Components/chat/discussion-message\";\nimport Header from \"../header\";\nimport Footer from \"../footer\";\nimport Menu from \"../menu\";\n// import * as chatservice from '../../Services/chat/chat-service';\nimport { json, redirect } from \"@remix-run/node\";\nimport { addSubject, getAllSubjects, getProjectSubjects, deleteSubject, editSubject, addDiscussionMessage, getAllDiscussionMessages, deleteDiscussionMessage } from \"../../Services/chat/chat-service\";\n//getProjectSubjects\nexport const loader = async ({\n  params\n}) => {\n  try {\n    const {\n      projectId\n    } = params;\n    const {\n      response,\n      err\n    } = await getProjectSubjects(projectId);\n    if (err) {\n      console.error(\"Error retrieving subjects for project:\", err);\n      return json({\n        error: \"Failed to retrieve subjects for project.\"\n      }, {\n        status: 500\n      });\n    }\n    return json({\n      subjects: response\n    });\n  } catch (error) {\n    console.error(\"Error processing request:\", error);\n    return json({\n      error: \"Internal server error.\"\n    }, {\n      status: 500\n    });\n  }\n};\nexport default function ChatMain() {\n  return <div>\n      {/* <div> */}\n      <Header />\n      <Menu />\n      {/* <Summary /> */}\n      <Footer />\n      <ChatForm />\n    </div>;\n}\n\n// Action for adding a discussion message\n_c = ChatMain;\nexport const action = async ({\n  request\n}) => {\n  try {\n    if (request.method === \"POST\") {\n      const formData = new URLSearchParams(await request.text());\n      const title = formData.get(\"title\");\n      const subjectId = formData.get(\"subjectId\");\n      const messageId = formData.get(\"messageId\");\n      const {\n        response,\n        err\n      } = await addDiscussionMessage(title, subjectId, messageId);\n      if (err) {\n        console.error(\"Error adding discussion message:\", err);\n        return redirect(\"/error\", {\n          headers: {\n            \"X-Remix-Error\": \"500\"\n          }\n        });\n      }\n      return redirect(\"/chat\");\n    } else {\n      return json({\n        error: \"Invalid request method.\"\n      }, {\n        status: 400\n      });\n    }\n  } catch (error) {\n    console.error(\"Error processing action:\", error);\n    return redirect(\"/error\", {\n      headers: {\n        \"X-Remix-Error\": \"500\"\n      }\n    });\n  }\n};\n\n// export default class ChatMain extends Component {\n//     state = {\n//         subjectId : this.props.subjectId,\n//         discussionMessages: [],\n//         users: this.props.context.state.users,\n//         subjects: this.props.projectId ? this.props.context.state.projectSubjects : this.props.context.state.subjects,\n//         subjectTitle: \"\",\n//         projectName: this.props.context.state.projectName\n//         // isOpen: false\n//     }\n\n//     getDiscussionMessages = async() => {\n//         let { response } = await chatservice.getAllDiscussionMessages(this.props.subjectId);\n//         if (response.err) {\n//             this.setState({\n//                 message: 'Error : ' + response.err\n//             });\n//         } else if (response.messages && response.messages.data.err) {\n\n//             this.setState({\n//                 message: 'Error : ' + response.messages.data.err,\n//             });\n//         } else {\n//         // console.log(\"response.data in pms provider\",response.data);\n//         response.data.sort((a,b) => (a.createdOn < b.createdOn));\n//             this.setState({\n//                 discussionMessages: response.data,\n//             })\n//         }\n//     }\n\n//     deleteMessage=(messages,id)=>{\n//         // console.log(\"messages\",messages);\n//         for(let i=0;i<messages.length;++i){\n\n//             // console.log(\"messages[i]._id\",messages[i]._id);\n//             // console.log(\"id\",id);\n//             if(messages[i]._id.toString()===id)\n//             {\n//                 messages[i].isDeleted = true;\n//                 //return messages[i];\n//                 break;\n//             }\n//             else if(messages[i].replyMessages && messages[i].replyMessages.length > 0)\n//             {\n//                 let replyMessages = messages[i].replyMessages.filter((r) => {\n//                     return r.isDeleted === false;\n//                 })\n//                 messages[i].replyMessages = this.deleteMessage(replyMessages,id);\n//                 //return messages[i];\n//                 // break;\n//             }\n//         }\n//         return messages;\n//     }\n\n//     deleteDiscussionMessage = async(messageId) => {\n//         // console.log(\"messageId\",messageId);\n//         let response = await chatservice.deleteDiscussionMessage(messageId, this.props.subjectId);\n//         if (response.err) {\n//             this.setState({\n//                 message: 'Error : ' + response.err\n//             });\n//         } else if (response.messages && response.messages.data.err) {\n\n//             this.setState({\n//                 message: 'Error : ' + response.messages.data.err,\n//             });\n//         }\n//         else {\n\n//             let messages = Object.assign([], this.state.discussionMessages);\n//             let discussionMessages = (messages && messages.length > 0) && messages.filter((r) => {\n//                 return r.isDeleted === false;\n//             })\n//             let updatedMessages = this.deleteMessage(discussionMessages,messageId);\n\n//             this.setState({\n//                 discussionMessages: updatedMessages\n//             })\n\n//         }\n//     }\n\n//     addMessage = (discussionMessages,messageId,newMsg ) => {\n//         for(let i=0;i<discussionMessages.length;++i){\n//             if(discussionMessages[i]._id === messageId)\n//             {\n//                 (discussionMessages[i].replyMessages && discussionMessages[i].replyMessages.length > 0) ?\n//                 discussionMessages[i].replyMessages.push(newMsg)\n//                 :\n//                 (discussionMessages[i].replyMessages=[newMsg]);\n//                 //return messages[i];\n//                 break;\n//             }\n//             else if(discussionMessages[i].replyMessages && discussionMessages[i].replyMessages.length > 0)\n//             {\n//                 let replyMessages = discussionMessages[i].replyMessages.filter((r) => {\n//                     return r.isDeleted === false;\n//                 })\n//                 discussionMessages[i].replyMessages= this.addMessage(replyMessages,messageId,newMsg);\n//                 //return messages[i];\n//                 // break;\n//             }\n//         }\n//         return discussionMessages;\n//     }\n\n//     addDiscussionMsg = (message) => {\n//         // console.log(\"message\",message);\n//         // console.log(\"message\",message);\n//         this.setState({\n//             discussionMessages: [message, ...this.state.discussionMessages]\n//         })\n//     }\n\n//     addReplyMessage = (message, messageId) => {\n//         let messages = Object.assign([],this.state.discussionMessages);\n//             let discussionMessages = (messages && messages.length > 0) && messages.filter((r) => {\n//                 return r.isDeleted === false;\n//             })\n//             // message.isOpen = false;\n//            let addedReplyMessages = this.addMessage(discussionMessages,messageId,message);\n\n//         // console.log(\"addedReplyMessages\",addedReplyMessages);\n//         this.setState({\n//             discussionMessages: addedReplyMessages\n//         })\n//     }\n\n//     componentWillReceiveProps(nextProps) {\n//         this.setState({\n//             users: nextProps.context.state.users,\n//             subjects: nextProps.context.state.subjects\n//         })\n//     }\n\n//     getSubjectTitle = () => {\n//         let subject = this.state.subjects.filter((s) => {\n//             return s._id === this.props.subjectId;\n//         })\n//         let subjectTitle = (subject.length > 0) ? subject[0].title : \"\";\n//         this.setState({\n//             subjectTitle: subjectTitle\n//         })\n//     }\n\n//     componentDidMount = async() => {\n//         if(this.state.users.length === 0 ){\n//             this.props.context.actions.setUsers();\n//         }\n//         if(this.state.subjects.length === 0 ){\n//             await this.props.context.actions.setSubjects();\n//         }\n//         this.getDiscussionMessages();\n//         this.getSubjectTitle();\n//     }\n\n//     setIsOpen = (messages, messageId, state) => {\n//         for(let i=0;i<messages.length;++i){\n//             if(messages[i]._id === messageId)\n//             {\n//                 messages[i].isOpen = state;\n//                 //return messages[i];\n//                 break;\n//             }\n//             else if(messages[i].replyMessages && messages[i].replyMessages.length > 0)\n//             {\n//                 let replyMessages = messages[i].replyMessages.filter((r) => {\n//                     return r.isDeleted === false;\n//                 })\n//                 messages[i].replyMessages= this.setIsOpen(replyMessages,messageId,state);\n//                 //return messages[i];\n//                 // break;\n//             }\n//         }\n//         return messages;\n//     }\n\n//     updateState = (state,messageId) => {\n//         let messages = Object.assign([],this.state.discussionMessages)\n//         let updatedIsOpen = this.setIsOpen(messages,messageId, state);\n\n// \t\tthis.setState({\n// \t\t\tdiscussionMessages: updatedIsOpen\n// \t\t})\n// \t}\n\n//     getMessages = (message) => {\n//         let username = \"\";\n//         let users = this.state.users.filter((user) => {\n//             return user._id === message.createdBy;\n//         });\n\n//         username = (users && users.length>0)?users[0].name:'';\n\n//         return (\n//             <DiscussionMessage message={message} key={message._id} createdBy={username} subjectId={this.props.subjectId} users ={this.state.users}\n//                 deleteDiscussionMessage={this.deleteDiscussionMessage} addReplyMessage={this.addReplyMessage}\n//                 updateState={this.updateState}/>\n//         );\n//     }\n\n//     render () {\n//         let filteredDiscussionMessages = (this.state.discussionMessages && this.state.discussionMessages.length > 0) && this.state.discussionMessages.filter((m) => {\n//             return m.isDeleted === false;\n//         })\n//         var chatList = (filteredDiscussionMessages.length > 0) && filteredDiscussionMessages.map((message) => {\n//             let messages = this.getMessages(message);\n//             return messages;\n//         });\n\n//         return(\n//             <div>\n//                 <div className=\"row\" >\n//                     {this.props.projectId ? <h3 style={{textAlign: \"left\", textTransform: \"capitalize\"}}>{this.state.projectName}</h3> : \"\"}\n//                 </div>\n\n//                     {this.props.projectId ? <div className=\"row\" ><TaskMenu {...this.props} /></div> : \"\"}\n\n//                 <div className=\"row message-margin\">\n//                     <ChatForm subjectId={this.props.subjectId} addDiscussionMsg={this.addDiscussionMsg} subjectTitle={this.state.subjectTitle}/>\n//                 </div>\n//                 <div className=\"row\" >\n//                     <div className=\"col-sm-10 message-list\" style={{ height: '420px', overflowY: 'auto' }}>\n//                         {chatList}\n//                     </div>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\nvar _c;\n$RefreshReg$(_c, \"ChatMain\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_jsx_dev_runtime"]
}
