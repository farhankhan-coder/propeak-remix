{
  "version": 3,
  "sources": ["../../../app/routes/category/route.jsx", "../../../app/Components/category/category-list.jsx", "../../../app/Components/category/category-form.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/category/route.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/category/route.jsx\");\n}\n// REMIX HMR END\n\nimport React, { useState } from \"react\";\nimport CategoryList from \"../../Components/category/category-list\";\nimport CategoryForm from \"../../Components/category/category-form\";\nimport { useLoaderData, redirect } from \"@remix-run/react\";\nimport { getAllCategories, saveCategory } from \"../../Services/category/category-service\";\nimport Header from \"../header\";\nimport Footer from \"../footer\";\nimport Menu from \"../menu\";\nimport { json } from \"@remix-run/react\";\nimport categoryc from \"../../Components/category/category.css\";\nimport verifyToken from \"../../verify-token/verify-token\";\n// import { getUser } from \"../../routess/loginn/services/login-service\";\nexport const links = () => [{\n  rel: \"stylesheet\",\n  href: categoryc\n}];\nimport { grantAccess } from \"../../middleware/grantAccess\";\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from '../../common/const';\n// export async function loader({ request, headers }) {\n//   try {\n//     // Check if the headers object is defined and contains the expected properties\n//     if (!headers || !headers['X-access_token'] || !headers['X-refresh_token']) {\n//       return json({ error: true, message: 'Access token or refresh token is missing.' }, { status: 401 });\n//     }\n\n//     // Extract tokens from request headers\n//     const token = headers[ACCESS_TOKEN] || headers[ACCESS_TOKEN.toLowerCase()];\n//     const refreshToken = headers[REFRESH_TOKEN] || headers[REFRESH_TOKEN.toLowerCase()];\n\n//     // Apply grantAccess middleware to verify tokens\n//     // await grantAccess(request, token, refreshToken);\n//     // console.log(grantAccess, \"grant access \")\n//     // // Fetch categories using your service function\n//     // const categories = await getAllCategories();\n\n//     // Return categories as JSON response\n//     return json({ categories });\n//   } catch (error) {\n//     console.error(\"Error fetching categories:\", error);\n//     throw error;\n//   }\n// }\nexport async function loader({\n  request\n}) {\n  try {\n    // Verify the access token and refresh token using your authentication middleware\n    await verifyToken(request);\n    console.log(verifyToken, \"check the token \");\n    // If authentication is successful, proceed with fetching categories\n    const categories = await getAllCategories();\n    return json({\n      categories\n    });\n  } catch (error) {\n    console.error(\"Error fetching categories:\", error);\n    throw error;\n  }\n}\n// export async function loader({ request,headers }) {\n//   try {\n//     // const token = headers[ACCESS_TOKEN] || headers[ACCESS_TOKEN.toLowerCase()];\n//     // const refreshToken = headers[REFRESH_TOKEN] || headers[REFRESH_TOKEN.toLowerCase()];\n//     // await grantAccess(request, token, refreshToken);\n\n//     const categories = await getAllCategories();\n//     // const user = await getUser(request); // Get logged-in user\n//     // console.log(user, \"user\")\n//     // console.log(categories);\n//     return json({ categories });\n//   } catch (error) {\n//     console.error(\"Error fetching categories:\", error);\n//     throw error;\n//   }\n// }\n\nexport default function CategoryComponent() {\n  _s();\n  const {\n    categories\n  } = useLoaderData();\n  const [showNewCategory, setShowNewCategory] = useState(false);\n  const [showEditCategory, setShowEditCategory] = useState(false);\n  const [category, setCategory] = useState({\n    title: \"\",\n    displayName: \"\",\n    custom: \"\",\n    show: true,\n    sequence: \"\"\n  });\n  const [labelsuccessvalue, setLabelSuccessValue] = useState(\"\");\n  const [labelvalue, setLabelValue] = useState(\"\");\n  const addNewCategoryWindow = () => {\n    setShowNewCategory(true);\n    setCategory({\n      title: \"\",\n      displayName: \"\",\n      custom: \"\",\n      show: true,\n      sequence: \"\"\n    });\n    setLabelSuccessValue(\"\");\n    setLabelValue(\"\");\n  };\n  const editCategoryWindow = selectedCategory => {\n    setShowEditCategory(true);\n    setCategory({\n      _id: selectedCategory._id,\n      title: selectedCategory.title,\n      displayName: selectedCategory.displayName,\n      custom: selectedCategory.custom,\n      show: selectedCategory.show,\n      sequence: selectedCategory.sequence\n    });\n    setLabelSuccessValue(\"\");\n    setLabelValue(\"\");\n  };\n  const closeCategory = () => {\n    setShowNewCategory(false);\n    setShowEditCategory(false);\n    setCategory({\n      _id: \"\",\n      title: \"\",\n      displayName: \"\",\n      custom: \"\",\n      show: true,\n      sequence: \"\"\n    });\n    setLabelSuccessValue(\"\");\n    setLabelValue(\"\");\n  };\n  return <div className=\"container bg-white\">\n      {/* <div> */}\n      <Header />\n      <Menu />\n      {/* <Summary /> */}\n      <Footer />\n      <div className=\"row\">\n        <div className=\"col-sm-7\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <h4 className=\"sub-title ml-3 mt-3\">\n                Category ({categories.length})\n              </h4>\n            </div>\n            <div className=\"col-sm-6\">\n              <h4 className=\"mt-3\">\n                <span className=\"btn btn-xs btn-info float-right\" title=\"New Category\" onClick={addNewCategoryWindow}>\n\n                  Add Category &nbsp;\n                  <button>Add new </button>\n                  {/* <i className=\"fas fa-plus\"></i> */}\n                </span>\n              </h4>\n            </div>\n          </div>\n        </div>\n      </div>\n      <hr />\n\n      <div className=\"row\">\n        <div className=\"col-sm-12 col-md-5 col-lg-5 order-lg-1 order-md-1 form-wrapper\">\n          {showEditCategory || showNewCategory &&\n        // categories.map((category) => (\n        <CategoryForm key={category._id} // Make sure to provide a unique key for each component in the array\n        category={category} categories={categories} labelsuccessvalue={labelsuccessvalue} labelvalue={labelvalue} closeCategory={closeCategory} />\n\n        // ))\n        }\n        </div>\n        <div className={`col-sm-12 col-md-7 col-lg-7 contentWrapper`}>\n          <div className=\"scroll\">\n            <CategoryList categories={categories} editCategoryWindow={editCategoryWindow} closeCategory={closeCategory} />\n\n          </div>\n        </div>\n      </div>\n    </div>;\n}\n_s(CategoryComponent, \"koNXRajr4Tw4ctIasPCE1MPpRI4=\", false, function () {\n  return [useLoaderData];\n});\n_c = CategoryComponent;\nexport async function action({\n  request\n}) {\n  try {\n    if (request.method === \"POST\") {\n      const formData = new URLSearchParams(await request.text());\n      const sequence = formData.get(\"sequence\");\n      const title = formData.get(\"title\");\n      const displayName = formData.get(\"displayName\");\n      const show = formData.get(\"show\") === \"true\";\n      const {\n        response,\n        err\n      } = await saveCategory(sequence, title, displayName, show);\n      if (!err) {\n        return redirect(\"/category\");\n      } else {\n        console.error(\"Error saving category:\", err);\n        return json({\n          error: \"Failed to save category.\"\n        }, {\n          status: 500\n        });\n      }\n    } else {\n      return json({\n        error: \"Invalid request method.\"\n      }, {\n        status: 400\n      });\n    }\n  } catch (error) {\n    console.error(\"Error processing request:\", error);\n    return json({\n      error: \"Internal server error.\"\n    }, {\n      status: 500\n    });\n  }\n}\n\n// import React, { useState } from \"react\";\n// import CategoryList from \"../../Components/category/category-list\";\n// import CategoryForm from \"../../Components/category/category-form\";\n// import { useLoaderData, redirect } from \"@remix-run/react\";\n// import {\n//   getAllCategories,\n//   saveCategory,\n// } from \"../../Services/category/category-service\";\n// import { json } from \"@remix-run/react\";\n// import categoryc from \"../../Components/category/category.css\";\n\n// export const links = () => [{ rel: \"stylesheet\", href: categoryc }];\n// export async function loader() {\n//   try {\n//     const categories = await getAllCategories();\n//     console.log(categories);\n//     return json({ categories });\n//   } catch (error) {\n//     console.error(\"Error fetching categories:\", error);\n//     throw error;\n//   }\n// }\n\n// export default function CategoryComponent() {\n//   const { categories } = useLoaderData();\n//   const [showNewCategory, setShowNewCategory] = useState(false);\n//   const [showEditCategory, setShowEditCategory] = useState(false);\n//   const [category, setCategory] = useState({\n//     title: \"\",\n//     displayName: \"\",\n//     custom: \"\",\n//     show: true,\n//     sequence: \"\",\n//   });\n//   const [labelsuccessvalue, setLabelSuccessValue] = useState(\"\");\n//   const [labelvalue, setLabelValue] = useState(\"\");\n\n//   const addNewCategoryWindow = () => {\n//     setShowNewCategory(true);\n//     setCategory({\n//       title: \"\",\n//       displayName: \"\",\n//       custom: \"\",\n//       show: true,\n//       sequence: \"\",\n//     });\n//     setLabelSuccessValue(\"\");\n//     setLabelValue(\"\");\n//   };\n\n//   const editCategoryWindow = (selectedCategory) => {\n//     setShowEditCategory(true);\n//     setCategory({\n//       _id: selectedCategory._id, // Make sure to include the ID\n//       title: selectedCategory.title,\n//       displayName: selectedCategory.displayName,\n//       custom: selectedCategory.custom,\n//       show: selectedCategory.show,\n//       sequence: selectedCategory.sequence,\n//     });\n//     setLabelSuccessValue(\"\");\n//     setLabelValue(\"\");\n//   };\n\n//   const closeCategory = () => {\n//     setShowNewCategory(false);\n//     setShowEditCategory(false);\n//     setCategory({\n//       title: \"\",\n//       displayName: \"\",\n//       custom: \"\",\n//       show: true,\n//       sequence: \"\",\n//     });\n//     setLabelSuccessValue(\"\");\n//     setLabelValue(\"\");\n//   };\n\n//   return (\n//     <div className=\"container bg-white\">\n//       <div className=\"row\">\n//         <div className=\"col-sm-7\">\n//           <div className=\"row\">\n//             <div className=\"col-sm-6\">\n//               <h4 className=\"sub-title ml-3 mt-3\">\n//                 Category ({categories.length})\n//               </h4>\n//             </div>\n//             <div className=\"col-sm-6\">\n//               <h4 className=\"mt-3\">\n//                 <span\n//                   className=\"btn btn-xs btn-info float-right\"\n//                   title=\"New Category\"\n//                   onClick={addNewCategoryWindow}\n//                 >\n//                   Add Category &nbsp;\n//                   <button>Add new </button>\n//                   {/* <i className=\"fas fa-plus\"></i> */}\n//                 </span>\n//               </h4>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <hr />\n\n//       <div className=\"row\">\n//         <div className=\"col-sm-12 col-md-5 col-lg-5 order-lg-1 order-md-1 form-wrapper\">\n//           {showEditCategory ||\n//             (showNewCategory &&\n//               categories.map((category) => (\n//                 <CategoryForm\n//                   key={category._id} // Make sure to provide a unique key for each component in the array\n//                   category={category}\n//                   categories={categories}\n//                   labelsuccessvalue={labelsuccessvalue}\n//                   labelvalue={labelvalue}\n//                 />\n//               )))}\n//         </div>\n//         <div className={`col-sm-12 col-md-7 col-lg-7 contentWrapper`}>\n//           <div className=\"scroll\">\n//             <CategoryList\n//               categories={categories}\n//               editCategoryWindow={editCategoryWindow}\n//             />\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export async function action({ request }) {\n//   try {\n//     if (request.method === \"POST\") {\n//       const formData = new URLSearchParams(await request.text());\n//       const sequence = formData.get(\"sequence\");\n//       const title = formData.get(\"title\");\n//       const displayName = formData.get(\"displayName\");\n//       const show = formData.get(\"show\") === \"true\";\n\n//       const { response, err } = await saveCategory(\n//         sequence,\n//         title,\n//         displayName,\n//         show\n//       );\n//       if (!err) {\n//         return redirect(\"/category\");\n//       } else {\n//         console.error(\"Error saving category:\", err);\n//         return json({ error: \"Failed to save category.\" }, { status: 500 });\n//       }\n//     } else {\n//       return json({ error: \"Invalid request method.\" }, { status: 400 });\n//     }\n//   } catch (error) {\n//     console.error(\"Error processing request:\", error);\n//     return json({ error: \"Internal server error.\" }, { status: 500 });\n//   }\n// }\nvar _c;\n$RefreshReg$(_c, \"CategoryComponent\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/Components/category/category-list.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/Components/category/category-list.jsx\");\n  import.meta.hot.lastModified = \"1709384153065.1104\";\n}\n// REMIX HMR END\n\nimport React, { useState } from \"react\";\nimport CategoryForm from \"./category-form\";\nimport { Form } from \"@remix-run/react\";\nconst CategoryList = ({\n  categories = [],\n  editCategoryWindow,\n  closeCategory\n}) => {\n  _s();\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const handleEditClick = category => {\n    setSelectedCategory(category);\n    editCategoryWindow(category);\n  };\n  const handleCloseCategory = () => {\n    setSelectedCategory(null);\n    closeCategory();\n  };\n  return <ul className=\"list-group list-group-flush\">\n      {categories.map((category, index) => <li className=\"list-group-item d-flex justify-content-between align-items-center\" id={index} key={category._id}>\n          {category.displayName}\n          <span>\n            {category.sequence}&nbsp;&nbsp;&nbsp;\n            <span className=\"btn btn-xs btn-outline-info\">\n              <button onClick={() => handleEditClick(category)}>Edit</button>\n            </span>\n            <span title=\"Delete Category\" className=\"btn btn-xs btn-outline-danger\">\n              <Form method=\"DELETE\" action={`/category/${category._id}`}>\n                <button type=\"submit\">Delete</button>\n              </Form>{\" \"}\n            </span>\n          </span>\n          {/* Render the CategoryForm only if the current category is selected for editing */}\n          {selectedCategory && selectedCategory._id === category._id && <CategoryForm category={selectedCategory} isEditMode handleCloseCategory={handleCloseCategory} />}\n        </li>)}\n    </ul>;\n};\n_s(CategoryList, \"RgHDLEuJ1Ja2GayX64Y/niiK+6s=\");\n_c = CategoryList;\nexport default CategoryList;\n\n// import React, { useState } from \"react\";\n// import CategoryForm from \"./category-form\";\n// import { Form } from \"@remix-run/react\";\n// import { method } from \"lodash\";\n// const CategoryList = ({ categories = [], editCategoryWindow }) => {\n//   const [selectedCategory, setSelectedCategory] = useState(null);\n\n//   const handleEditClick = (category) => {\n//     setSelectedCategory(category);\n//     // Call the editCategoryWindow function if needed\n//     editCategoryWindow(category);\n//   };\n//   return (\n//     <ul className=\"list-group list-group-flush\">\n//       {categories.map((category, index) => (\n//         <li\n//           className=\"list-group-item d-flex justify-content-between align-items-center\"\n//           id={index}\n//           key={category._id}\n//         >\n//           {category.displayName}\n//           <span>\n//             {category.sequence}&nbsp;&nbsp;&nbsp;\n//             <span className=\"btn btn-xs btn-outline-info\">\n//               <button onClick={() => handleEditClick(category)}>Edit</button>\n//             </span>\n//             <span\n//               title=\"Delete Category\"\n//               className=\"btn btn-xs btn-outline-danger\"\n//             >\n//               <Form method=\"DELETE\" action={`/category/${category._id}`}>\n//                 <button type=\"submit\">Delete</button>\n//               </Form>{\" \"}\n//             </span>\n//           </span>\n//           {/* Render the CategoryForm only if the current category is selected for editing */}\n//           {selectedCategory && selectedCategory._id === category._id && (\n//             <CategoryForm category={selectedCategory} />\n//           )}\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// };\n\n// export default CategoryList;\n\n// // import React, { useState } from \"react\";\n// // import * as validate from \"../../common/validate-entitlements\";\n// // import { Form } from \"@remix-run/react\";\n// // import CategoryForm from \"./category-form\";\n// // const CategoryList = ({ categories = [], editCategoryWindow }) => {\n// //   const handleEditClick = (categoryId) => {\n// //     editCategoryWindow(categoryId);\n// //   };\n\n// //   // const [editCategoryId, setEditCategoryId] = useState(null);\n\n// //   // const handleEditClick = (categoryId) => {\n// //   //   setEditCategoryId(categoryId);\n// //   // };\n// //   // let editCategory = validate.validateAppLevelEntitlements(\n// //   //   props.appLevelAccess,\n// //   //   \"Category\",\n// //   //   \"Edit\"\n// //   // );\n// //   // let deleteCategory = validate.validateAppLevelEntitlements(\n// //   //   props.appLevelAccess,\n// //   //   \"Category\",\n// //   //   \"Delete\"\n// //   // );\n\n// //   var categoryView = categories.map((category, index) => {\n// //     return (\n// //       <li\n// //         className=\"list-group-item d-flex justify-content-between align-items-center\"\n// //         id={index}\n// //         key={category._id}\n// //         //draggable=\"true\"\n// //         // onDragStart={(event) => onDragStart(index, event)}\n// //         // onDrop={(event) => onDrop(index, event)}\n// //         // onDragOver={onDragOver}\n// //       >\n// //         {category.displayName}\n// //         <span>\n// //           {category.sequence}&nbsp;&nbsp;&nbsp;\n// //           {/* {editCategory ? ( */}\n// //           <span className=\"btn btn-xs btn-outline-info \">\n// //             {/* <i className=\"fas fa-pencil-alt\"></i> */}\n// //             {/* <Form method=\"PUT\" action={`/category/${category._id}`}> */}\n// //             <button onClick={() => editCategoryWindow(category)}>Edit</button>\n// //             {/* </Form>{\" \"} */}\n// //           </span>\n// //           <span\n// //             title=\"Delete Category\"\n// //             className=\"btn btn-xs btn-outline-danger\"\n// //           >\n// //             <Form method=\"DELETE\" action={`/category/${category._id}`}>\n// //               <button type=\"submit\">Delete</button>\n// //             </Form>{\" \"}\n// //           </span>\n// //         </span>\n// //       </li>\n// //     );\n// //   });\n\n// //   return <ul className=\"list-group list-group-flush\">{categoryView}</ul>;\n// // };\n\n// // export default CategoryList;\n\n// //           <span\n// //             title=\"Delete Category\"\n// //             className=\"btn btn-xs btn-outline-danger\"\n// //           >\n// //             <Form method=\"DELETE\" action={`/category/${category._id}`}>\n// //               <button type=\"submit\">Delete</button>\n// //             </Form>{\" \"}\n// //           </span>\nvar _c;\n$RefreshReg$(_c, \"CategoryList\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/Components/category/category-form.jsx\"\n);\n\n}\n// REMIX HMR END\n\n\nimport React, { Component } from \"react\";\nimport { Form } from \"@remix-run/react\";\nimport category from \"./category.css\";\n\nexport const links = () => [\n{ rel: \"stylesheet\", href: category }];\n\nconst labelStyle = {\n  fontSize: \"small\"\n};\n\nexport default class CategoryForm extends Component {\n  constructor(props) {\n    super(props);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleCheckbox = this.handleCheckbox.bind(this);\n    this.state = {\n      category: {\n        _id: \"\",\n        displayName: \"\",\n        sequence: \"\",\n        title: \"\"\n      },\n      msg: \"\",\n      sequence: \"\",\n      title: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ category: this.props.category });\n  }\n\n  handleCheckbox(e) {\n    const name = e.target.name;\n    const value =\n    e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\n    this.setState({\n      category: {\n        ...this.state.category,\n        [name]: value\n      }\n    });\n  }\n\n  handleInputChange(event) {\n    const value = event.target.value;\n    const name = event.target.name;\n\n    let title = this.state.category.title;\n    let sequence = this.state.category.sequence;\n\n    if (name === \"sequence\") {\n      sequence = event.target.value;\n    }\n\n    if (name === \"displayName\") {\n      if (title === \"todo\" || title === \"inprogress\" || title === \"completed\") {\n        title = title;\n      } else {\n        title = value.toLowerCase().split(\" \").join(\"\");\n      }\n    }\n\n    this.setState({\n      category: {\n        ...this.state.category,\n        [name]: value,\n        title: title,\n        sequence: sequence\n      },\n      msg: \"\"\n    });\n  }\n\n  render() {\n    const { displayName, sequence, show } = this.state.category;\n    const { isEditMode } = this.props;\n\n    return (\n      <div style={{ marginTop: \"10px\" }}>\n         <span onClick={this.props.closeCategory} className=\"float-right mr-3\">\n          <i className=\"fas fa-times close\"></i>\n          <button>close</button>\n         </span>\n        {this.state.category._id ?\n        <h4 className=\"sub-title ml-3\"> Edit Category</h4> :\n\n        <h4 className=\"sub-title ml-3\"> Add Category</h4>}\n\n        <hr />\n        <div className=\"container\">\n          <div className=\"form-group\">\n            <Form\n              method={isEditMode ? \"PUT\" : \"POST\"}\n              action={\n              isEditMode ?\n              `/category/${this.state.category._id}` :\n              \"/category\"}>\n\n\n              <div className=\"row\">\n                <div className=\"col-sm-12\">\n                  <div className=\"form-group\">\n                    <label style={labelStyle}>Title</label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      placeholder=\" \"\n                      id=\"txtTitle\"\n                      name=\"title\"\n                      onChange={this.handleInputChange}\n                      value={this.state.category.title}\n                      autoComplete=\"off\" />\n\n                    {this.state.msg ? <span>{this.state.msg}</span> : \"\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"col-sm-12\">\n                  <div className=\"form-group\">\n                    <label style={labelStyle}>Category</label>\n                    <span style={{ color: \"red\" }}>*</span>\n\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      placeholder=\" \"\n                      id=\"txtDisplayName\"\n                      name=\"displayName\"\n                      onChange={this.handleInputChange}\n                      value={displayName}\n                      autoComplete=\"off\" />\n\n                    {this.state.msg ? <span>{this.state.msg}</span> : \"\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"col-sm-6\">\n                  <div className=\"form-group\">\n                    <label style={labelStyle}>Sequence</label>\n                    <span style={{ color: \"red\" }}>*</span>\n\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      placeholder=\" \"\n                      id=\"txtSequence\"\n                      name=\"sequence\"\n                      onChange={this.handleInputChange}\n                      value={sequence}\n                      autoComplete=\"off\" />\n\n                    {this.state.msg ? <span>{this.state.msg}</span> : \"\"}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"col-sm-6\">\n                  <div className=\"form-group\">\n                    <label style={labelStyle}>Show</label>\n                    <span style={{ color: \"red\" }}>*</span> &nbsp;\n                    <input\n                      type=\"checkbox\"\n                      placeholder=\" \"\n                      id=\"txtShow\"\n                      onChange={this.handleCheckbox}\n                      name=\"show\"\n                      value={show}\n                      checked={show} />\n\n                  </div>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-sm-12\">\n                  <input\n                    type=\"submit\"\n                    value=\"Submit\"\n                    className=\"btn btn-info btn-block\" />\n\n                </div>\n              </div>\n            </Form>\n          </div>\n        </div>\n      </div>);\n\n  }\n}"],
  "mappings": "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",
  "names": ["import_react", "import_react", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "_s", "_s", "_c", "_c"]
}
