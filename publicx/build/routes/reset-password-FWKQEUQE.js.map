{
  "version": 3,
  "sources": ["../../../app/Components/login/components/reset-password.jsx", "../../../app/routes/reset-password/route.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/Components/login/components/reset-password.jsx\"\n);\n\n}\n// REMIX HMR END\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as resetpassservice from \"../services/login-service\";\nimport \"./reset-password.css?__remix_sideEffect__\";\nimport Recaptcha from \"react-recaptcha\";\nimport config from \"../../../common/config\";\nimport \"./login.css?__remix_sideEffect__\";\nimport { Form } from \"@remix-run/react\";\n\nexport default class ResetPassword extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.setNewPassword = this.setNewPassword.bind(this);\n    this.recaptchaLoaded = this.recaptchaLoaded.bind(this);\n    this.verifyCallback = this.verifyCallback.bind(this);\n  }\n\n  getToken() {\n    if (typeof window !== \"undefined\") {\n      let loc = window.location.pathname.split(\"/\");\n      let token = loc[loc.length - 1];\n      return token;\n    } else {\n      // Handle the case where window is not defined\n      return null; // or throw an error, or return a default value, etc.\n    }\n  }\n\n  state = {\n    password: \"\",\n    confirmPassword: \"\",\n    passChanged: false,\n    message: \"\",\n    passwordValid: false,\n    formErrors: { password: \"\" },\n    // token: this.getToken(),\n    isVerified: false,\n    isDisableField: \"\"\n  };\n\n  handleInputChange(e) {\n    const target = e.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState(\n      {\n        [name]: value,\n        message: \"\"\n      },\n      this.validateField.bind(this, name, value)\n    );\n  }\n\n  async setNewPassword() {\n    if (!this.state.isVerified) {\n      this.setState({\n        message: \"Please verify that you are a human\"\n      });\n    } else {\n      var reset = {\n        password: this.state.password,\n        confirmPassword: this.state.confirmPassword,\n        token: this.state.token\n      };\n      let { response, err } = await resetpassservice.resetPassword(reset);\n      if (err) {\n        this.setState({\n          message: \"Error: \" + err\n        });\n      } else {\n        if (response.data.err) {\n          this.recaptchaInstance.reset();\n          this.setState({\n            message: response.data.err,\n            isVerified: false\n          });\n        } else {\n          this.setState({\n            passChanged: true,\n            reset: response.data\n          });\n        }\n      }\n      this.recaptchaInstance.reset();\n      this.setState({\n        password: \"\",\n        confirmPassword: \"\",\n        isDisableField: \"ok\"\n      });\n    }\n  }\n\n  validateField(fieldName, value) {\n    let fieldValidationErrors = this.state.formErrors;\n    let passwordValid = this.state.passwordValid;\n\n    switch (fieldName) {\n      case \"password\":\n        passwordValid = value.length >= 4;\n        fieldValidationErrors.password = passwordValid ? \"\" : \" is too short\";\n        break;\n      default:\n        break;\n    }\n    this.setState(\n      {\n        formErrors: fieldValidationErrors,\n        passwordValid: passwordValid\n      },\n      this.validateForm\n    );\n  }\n\n  validateForm() {\n    this.setState({ formValid: this.state.passwordValid });\n  }\n\n  recaptchaLoaded() {\n\n    // Handle recaptcha loaded event\n  }\n  verifyCallback(response) {\n    if (response) {\n      this.setState({\n        isVerified: true,\n        message: \"\"\n      });\n    }\n  }\n\n  render() {\n    const token = this.props;\n    return (\n      <React.Fragment>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-sm-6 offset-sm-3 text-center\">\n              <img\n                src=\"/images/proPeak.png\"\n                alt=\"proPeak PMS\"\n                style={{\n                  width: \"200px\",\n                  display: \"inline-block\",\n                  textAlign: \"center\",\n                  marginTop: \"30px\",\n                  marginBottom: \"30px\"\n                }} />\n\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-sm-6 offset-sm-3\">\n              <div className=\"reset-wrapper reset-box-shadow  justify-content-center align-items-center\">\n                {this.state.message ?\n                <span className=\"resetpass-alert alert-danger\">\n                    {this.state.message}\n                  </span> :\n\n                \"\"}\n\n                <h4 className=\"login-title\">Reset Password</h4>\n                <hr />\n                <Form method=\"POST\" action=\"/reset-password\">\n                  {this.state.isDisableField !== \"ok\" ?\n                  <span>\n                      <div className=\"form-group \">\n                        <label htmlFor=\"Enter Password\">Enter Password</label>\n                        <input\n                        className=\"form-control\"\n                        type=\"password\"\n                        placeholder=\"Enter Password\"\n                        name=\"password\"\n                        value={this.state.password}\n                        onChange={this.handleInputChange} />\n\n                      </div>\n                      <div className=\"form-group \">\n                        <label htmlFor=\"Confirm Password\">Confirm Password</label>\n                        <input\n                        className=\"form-control\"\n                        type=\"password\"\n                        placeholder=\"Confirm Password\"\n                        name=\"confirmPassword\"\n                        value={this.state.confirmPassword}\n                        onChange={this.handleInputChange} />\n\n                      </div>\n                      <div className=\"form-group\">\n                        <Recaptcha\n                        sitekey={config.sitekey}\n                        render=\"explicit\"\n                        onloadCallback={this.recaptchaLoaded}\n                        verifyCallback={this.verifyCallback}\n                        ref={(e) => this.recaptchaInstance = e} />\n\n                      </div>\n                      <div className=\"form-group\">\n                        <div className=\"row\">\n                          <div className=\"col-sm-12\">\n                            <input\n                            type=\"submit\"\n                            value=\"Submit\"\n                            className=\"btn btn-primary btn-block\" />\n\n                          </div>\n                        </div>\n                      </div>\n                    </span> :\n\n                  \"\"}\n\n                </Form>\n              </div>{\" \"}\n            </div>\n          </div>\n        </div>\n      </React.Fragment>);\n\n  }\n}", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/routes/reset-password/route.jsx\"\n);\nimport.meta.hot.lastModified = \"1709489093623.7546\";\n}\n// REMIX HMR END\n\nimport ResetPassword from \"../../Components/login/components/reset-password\";\nimport { json } from \"@remix-run/node\";\nimport { getToken } from \"../../Services/token/token-service\";\nimport Auth from \"../../utils/auth\";\nimport { useLoaderData } from \"@remix-run/react\";\n\nexport const loader = async ({ request }) => {\n  try {\n    if (typeof localStorage !== 'undefined') {\n      const token = await getToken();\n      const auth = Auth.getToken();\n      console.log(auth, \"auth\")\n      return json({ token, auth }); // Return the data as JSON\n    } else {\n      return json({ error: \"localStorage is not available\" }, { status: 500 });\n    }\n  } catch (error) {\n    console.error(\"Error in loader:\", error);\n    return json({ error: \"An error occurred while loading data\" }, { status: 500 });\n  }\n};\n\nexport default function resetPasswordRoute() {\n  const { token, auth } = useLoaderData();\n  return (\n    <div>\n      <ResetPassword token={token} auth={auth} />\n    </div>\n  );\n}\n\nexport const action = async ({ request }) => {\n  try {\n    const formData = await request.formData();\n    const password = formData.get(\"password\");\n    const confirmPassword = formData.get(\"confirmPassword\");\n    const token = formData.get(\"token\");\n    console.log(token, \"token \");\n    console.log(formData, \"formData \")\n    if (!password || !confirmPassword || !token) {\n      return json({ error: \"Missing required fields\" }, { status: 400 });\n    }\n    const resetResult = await resetpassservice.resetPass({\n      password,\n      confirmPassword,\n      token,\n    });\n\n    if (resetResult.err) {\n      return json({ error: resetResult.err }, { status: 400 });\n    } else {\n      return json({ message: resetResult.msg });\n    }\n  } catch (error) {\n    console.error(\"Error in reset password action:\", error);\n    return json(\n      { error: \"An error occurred while processing your request\" },\n      { status: 500 }\n    );\n  }\n};"],
  "mappings": "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",
  "names": ["React", "Recaptcha", "import_jsx_dev_runtime"]
}
